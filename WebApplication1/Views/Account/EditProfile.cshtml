@model StudentTaskManagement.ViewModels.L1StudentsViewModel;
@using static StudentTaskManagement.Utilities.GeneralEnum;

@{
    ViewData["Title"] = "Edit Profile";
    var baseUrl = $"{Context.Request.Scheme}://{Context.Request.Host}";
    var profileImageUrl = !string.IsNullOrEmpty(Model.ExistingProfileImagePath) ? $"{baseUrl}{Model.ExistingProfileImagePath}" : "";
    bool isProfileImageExist = !string.IsNullOrEmpty(Model.ExistingProfileImagePath) ? false : true;
    var studentIdCardUrl = !string.IsNullOrEmpty(Model.ExistingStudentIdentityCardPath) ? $"{baseUrl}{Model.ExistingStudentIdentityCardPath}" : "";
    bool isStudentImageExist = !string.IsNullOrEmpty(Model.ExistingProfileImagePath) ? false : true;
}


@section Styles {
    <link rel="stylesheet" href="https://code.jquery.com/ui/1.13.2/themes/base/jquery-ui.css">
    <link href="https://cdn.jsdelivr.net/gh/kartik-v/bootstrap-fileinput@5.5.0/css/fileinput.min.css" media="all" rel="stylesheet" type="text/css" />
    <style>
        .file-preview {
            border: 0px solid #ddd !important;
            padding: 0px !important;
            margin-bottom: 15px;
        }
        .file-drop-zone {
            border: 1px dashed #aaa;
            margin: 0px;
            border-radius: 5px;
            min-height: 0px;
        }
        .file-drop-zone-title
        {
            font-size: 1.3rem;
            padding: 45px 10px;
        }
        .file-input
        {
            position: static;
        }

        .file-preview-thumbnails {
            display: flex !important;
            justify-content: center !important;
            align-items: center !important;
        }
        .kv-file-content {
            width: 200px;
            height: 200px;
        }
        /* Modern Datepicker Styling */
        .ui-datepicker {
            background: #fff;
            border: none;
            border-radius: 8px;
            box-shadow: 0 0 10px rgba(0,0,0,0.1);
            padding: 10px;
            width: 300px;
        }

        .ui-datepicker-header {
            background: #f8f9fa;
            border: none;
            border-radius: 6px;
            padding: 8px;
        }

        .ui-datepicker-title {
            color: #212529;
            font-weight: 600;
        }

        .ui-datepicker-prev, .ui-datepicker-next {
            cursor: pointer;
        }

        .ui-datepicker select.ui-datepicker-month,
        .ui-datepicker select.ui-datepicker-year {
            width: 45%;
            padding: 5px;
            border: 1px solid #ced4da;
            border-radius: 4px;
            margin: 0 2px;
            height: auto;
        }

        .ui-datepicker th {
            color: #495057;
            font-weight: 600;
            padding: 8px;
        }

        .ui-datepicker td {
            padding: 2px;
        }

            .ui-datepicker td span, .ui-datepicker td a {
                text-align: center;
                padding: 8px;
                border-radius: 4px;
                border: none !important;
                background: transparent !important;
                color: #212529 !important;
            }

                .ui-datepicker td a:hover {
                    background: #e9ecef !important;
                }

                .ui-datepicker td a.ui-state-active {
                    background: #0d6efd !important;
                    color: #fff !important;
                }

                .ui-datepicker td a.ui-state-highlight {
                    background: #f8f9fa !important;
                    border: 1px solid #0d6efd !important;
                }

            /* Disabled dates */
            .ui-datepicker td.ui-state-disabled {
                opacity: 0.3;
            }

        /* Input styling */
        .datepicker {
            background-color: #fff !important;
            cursor: pointer;
        }

        /* Keep input and button together */
        .input-group {
            display: flex;
            align-items: stretch;
        }

        .input-group > .btn-primary.btn-file {
            padding: 0.79rem 16px !important;
            content: "" !important;
        }
        /* Calendar icon container */
        .input-group-text {
            background-color: #fff;
            border-color: #ced4da;
            color: #6c757d;
        }

            .input-group-text:hover {
                background-color: #f8f9fa;
                cursor: pointer;
            }

        .invalid-feedback {
            display: block;
            font-size: 0.875rem;
            color: #dc3545;
        }

        .is-invalid {
            border-color: #dc3545;
        }

            .is-invalid:focus {
                border-color: #dc3545;
                box-shadow: 0 0 0 0.2rem rgba(220, 53, 69, 0.25);
            }
    </style>
}

<div class="container min-vh-100 d-flex align-items-center justify-content-center">
    <div class="row justify-content-center w-100">
        <div class="col-md-8">
            <div class="card shadow-lg">
                <!-- Header -->
                <div class="card-header text-white text-center py-4">
                    <h3 class="mb-0 fw-bold"><i class="fas fa-user-edit me-2"></i>Edit Profile Info</h3>
                </div>

                <div class="card-body p-4">
                    <form id="registrationForm" method="post" enctype="multipart/form-data">
                        <!-- Account Information -->
                        <h5 class="h5-subtitle mb-4">Account Information</h5>
                        <div class="row mb-3">
                            <div class="col-md-6 mb-3">
                                <label for="Username" class="form-label fw-semibold lb-required">Username</label>
                                <input type="text" class="form-control" name="Username" id="Username" value="@Model.Username">
                            </div>
                            <div class="col-md-6 mb-3">
                                <label for="EmailAddress" class="form-label fw-semibold lb-required">Email Address</label>
                                <input type="email" class="form-control" name="EmailAddress" id="EmailAddress" value="@Model.EmailAddress">
                            </div>
                        </div>


                        <hr />
                        <!-- Personal Information -->
                        <h5 class="mb-4 mt-4">Personal Information</h5>
                        <div class="row mb-3">
                            <div class="col-md-6 mb-3">
                                <label for="FirstName" class="form-label fw-semibold lb-required">First Name</label>
                                <input type="text" class="form-control" name="FirstName" id="FirstName" value="@Model.FirstName">
                            </div>
                            <div class="col-md-6 mb-3">
                                <label for="LastName" class="form-label fw-semibold lb-required">Last Name</label>
                                <input type="text" class="form-control" name="LastName" id="LastName" value="@Model.LastName">
                            </div>
                        </div>

                        <div class="row mb-3">
                            <div class="col-md-6 mb-3">
                                <label for="DOB" class="form-label fw-semibold lb-required">Date of Birth</label>
                                <div class="input-group">
                                    <input type="text" class="form-control datepicker" readonly name="DOB" id="DOB" value="@Model.DOBDisplay">
                                    <span class="input-group-text" style="cursor: pointer;">
                                        <i class="fas fa-calendar"></i>
                                    </span>
                                </div>
                            </div>
                            <div class="col-md-6 mb-3">
                                <label for="Gender" class="form-label fw-semibold lb-required">Gender</label>
                                <div class="custom-dropdown">
                                    <select class="form-select" name="Gender" id="Gender">
                                        <option value="" selected>- Please Select -</option>
                                        <option value="@((int)Gender.Male)" selected=@(Model.Gender == (int)Gender.Male)>Male</option>
                                        <option value="@((int)Gender.Female)" selected=@(Model.Gender == (int)Gender.Female)>Female</option>
                                    </select>
                                </div>
                            </div>
                        </div>

                        <div class="row mb-3">
                            <div class="col-md-12 mb-3">
                                <label for="ProfileImage" class="form-label fw-semibold lb-required">Profile image</label>
                                <input type="file" class="form-control file-input" name="ProfileImage" id="ProfileImage" value="@Model.ProfileImage" accept="image/*" data-show-preview="true">
                            </div>
                        </div>

                        <!-- Guardian Information Section -->
                        <div id="guardianSection" style="display: none;">
                            <hr />
                            <h5 class="mb-4 mt-4">Guardian Information</h5>
                            <div class="row mb-3">
                                <div class="col-md-6 mb-3">
                                    <label for="GuardianName" class="form-label fw-semibold lb-required">Guardian Name</label>
                                    <input type="text" class="form-control guardian-field" name="GuardianName" id="GuardianName" value="@Model.GuardianName">
                                </div>
                                <div class="col-md-6 mb-3">
                                    <label for="GuardianContact" class="form-label fw-semibold lb-required">Guardian Contact Number</label>
                                    <input type="tel" class="form-control guardian-field" name="GuardianContactNumber" id="GuardianContactNumber" value="@Model.GuardianContactNumber">
                                </div>
                            </div>

                            <div class="row">
                                <div class="col-md-6">
                                    <label for="GuardianEmail" class="form-label fw-semibold lb-required">Guardian Email</label>
                                    <input type="email" class="form-control guardian-field" name="GuardianEmailAddress" id="GuardianEmailAddress" value="@Model.GuardianEmailAddress">
                                </div>
                                <div class="col-md-6">
                                    <label for="GuardianRelationship" class="form-label fw-semibold lb-required">Guardian Relationship</label>
                                    <div class="custom-dropdown">
                                        <select class="form-select" name="GuardianRelationship" id="GuardianRelationship" value="@Model.GuardianRelationship">
                                            <option value="" selected>- Please Select -</option>
                                            <option value="@((int)GuardianRelationship.Parent)" selected=@(Model.GuardianRelationship.HasValue ? Model.GuardianRelationship.Value == (int)GuardianRelationship.Parent : false)>Parent</option>
                                            <option value="@((int)GuardianRelationship.Grandparent)" selected=@(Model.GuardianRelationship.HasValue ? Model.GuardianRelationship.Value == (int)GuardianRelationship.Grandparent : false)>Grandparent</option>
                                            <option value="@((int)GuardianRelationship.Guardian)" selected=@(Model.GuardianRelationship.HasValue ? Model.GuardianRelationship.Value == (int)GuardianRelationship.Guardian : false)>Guardian</option>
                                        </select>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <hr />
                        <!-- Educational Information -->
                        <h5 class="mb-4 mt-4">Educational Information</h5>

                        <div class="row mb-3">
                            <div class="col-md-12 mb-3">
                                <label for="InstitutionName" class="form-label fw-semibold lb-required">Institution Name</label>
                                <input type="text" class="form-control" name="InstitutionName" id="InstitutionName" value="@Model.InstitutionName">
                            </div>
                        </div>
                        <div class="row mb-3">
                            <div class="col-md-6 mb-3">
                                <label for="EducationStage" class="form-label fw-semibold lb-required">Education Stage</label>
                                <div class="custom-dropdown">
                                    <select class="form-select" name="EducationStage" id="EducationStage" value="@Model.EducationStage" onchange="updateEducationalYear()">
                                        <option value="" selected>- Please Select -</option>
                                        <option value="@((int)EducationStage.Primary)" selected=@(Model.EducationStage == (int)EducationStage.Primary)>Primary</option>
                                        <option value="@((int)EducationStage.Secondary)" selected=@(Model.EducationStage == (int)EducationStage.Secondary)>Secondary</option>
                                        <option value="@((int)EducationStage.HighEducation)" selected=@(Model.EducationStage == (int)EducationStage.HighEducation)>High Education</option>
                                    </select>
                                </div>
                            </div>
                            <div class="col-md-6 mb-3">
                                <label for="EducationalYear" class="form-label fw-semibold lb-required">Educational Year</label>
                                <div class="custom-dropdown">
                                    <select class="form-select" name="EducationalYear" id="EducationalYear">
                                        <option value="" selected>- Please Select -</option>
                                    </select>
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-12">
                                <label for="InstitutionName" class="form-label fw-semibold lb-required">Student Identity Card Image</label>
                                <input type="file" class="form-control file-input" name="StudentIdentityCard" id="StudentIdentityCard" value="@Model.StudentIdentityCard" accept="image/*" data-show-preview="true">
                            </div>
                        </div>

                        <!-- Submit Button -->
                        <div class="d-grid gap-2">
                            
                        </div>
                        <!-- Action Buttons -->
                        <div class="d-flex justify-content-between">
                            <button type="button" class="btn btn-outline-secondary" onclick="window.location.href='@Url.Action("Index", "Home")'"><i class="fas fa-arrow-left"></i> Back to Home</button>
                            <button type="submit" id="btnSubmit" class="btn btn-primary">Update Profile</button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/gh/kartik-v/bootstrap-fileinput@5.5.0/js/fileinput.min.js"></script>
    <script>
        function checkAge() {
            const dobInput = document.getElementById('DOB');
            const guardianSection = document.getElementById('guardianSection');
            const guardianFields = document.getElementsByClassName('guardian-field');

            // Return early if no date is selected
            if (!dobInput || !dobInput.value) {
                return;
            }

            // Parse the date string (assuming format is dd-mm-yyyy from datepicker)
            const [day, month, year] = dobInput.value.split('-').map(num => parseInt(num, 10));
            const dob = new Date(year, month - 1, day); // month is 0-based in JavaScript

            // Validate date
            if (isNaN(dob.getTime())) {
                console.error('Invalid date format');
                return;
            }

            const today = new Date();
            let age = today.getFullYear() - dob.getFullYear();

            // Check if birthday hasn't occurred this year
            if (today.getMonth() < dob.getMonth() ||
                (today.getMonth() === dob.getMonth() && today.getDate() < dob.getDate())) {
                age--;
            }

            // Update guardian section visibility and field requirements
            if (age < 12) {
                guardianSection.style.display = 'block';
                // Make guardian fields required
                Array.from(guardianFields).forEach(field => {
                    field.required = true;
                });
            } else {
                guardianSection.style.display = 'none';
                // Remove required attribute
                Array.from(guardianFields).forEach(field => {
                    field.required = false;
                    field.value = ''; // Clear the values
                });
            }
        }

        // Check age on page load in case of form validation failure
        document.addEventListener('DOMContentLoaded', checkAge);

        function updateEducationalYear() {
            const educationStage = document.getElementById('EducationStage');
            const educationalYear = document.getElementById('EducationalYear');

            // Clear existing options
            educationalYear.innerHTML = '<option value="" selected>- Please Select -</option>';

            if (!educationStage.value) return;

            const stage = parseInt(educationStage.value);
            let maxYears;
            let suffix;
            let selectYearValue = @Model.EducationalYear;

            // Determine max years based on education stage
            switch (stage) {
                case @((int)EducationStage.Primary):
                case @((int)EducationStage.Secondary):
                    maxYears = 6;
                    suffix = 'Year';
                    break;
                case @((int)EducationStage.HighEducation):
                    maxYears = 3;
                    suffix = 'Year';
                    break;
                default:
                    return;
            }

            // Add year options
            for (let i = 1; i <= maxYears; i++) {
                const option = document.createElement('option');
                option.value = i;
                if (i == selectYearValue) { 
                    option.selected = true;
                }
                
                // Special handling for 1st, 2nd, 3rd, etc.
                let yearText;
                if (i === 1) yearText = '1st';
                else if (i === 2) yearText = '2nd';
                else if (i === 3) yearText = '3rd';
                else yearText = `${i}th`;

                if (i == 3 && stage == @((int)EducationStage.HighEducation)) {
                    option.text = `${yearText} ${suffix} & Above`;
                }
                else {
                    option.text = `${yearText} ${suffix}`;
                }
                
                
                educationalYear.appendChild(option);
            }
        }

        $(document).ready(function() {
            // Initialize file inputs with configuration
            $("#ProfileImage").fileinput({
                theme: 'fa5',
                showUpload: false,
                showCancel: false,
                showRemove: false,
                showBrowse: false,
                showClose: false,
                showCaption: false,  // This hides the input field
                maxFileSize: 2048, // 2MB
                allowedFileExtensions: ['jpg', 'jpeg', 'png'],
                initialPreviewAsData: true,
                browseOnZoneClick: true,  // This enables clicking on drop zone
                layoutTemplates: {
                    footer: '', // This removes the file details/info footer
                    actions: '', // This removes the actions section that contains the details button
                },
                initialPreview: ['@profileImageUrl'].filter(Boolean),
                initialPreviewConfig: [
                    {
                        caption: "Current Profile Image",
                        size: 0,
                        key: 1
                    }
                ],
                msgPlaceholder: "Select file...",
                msgSelected: "File selected",
                msgProcessing: "Processing...",
                maxFileCount: 1,
                required: @(isProfileImageExist.ToString().ToLower()),  // Note the ! operator
                validateInitialCount: true
            });

            $("#StudentIdentityCard").fileinput({
                theme: 'fa5',
                showUpload: false,
                showCancel: false,
                showRemove: false,
                showBrowse: false,
                showClose: false,
                showCaption: false,  // This hides the input field
                maxFileSize: 2048, // 2MB
                allowedFileExtensions: ['jpg', 'jpeg', 'png'],
                initialPreviewAsData: true,
                browseOnZoneClick: true,  // This enables clicking on drop zone
                layoutTemplates: {
                    footer: '', // This removes the file details/info footer
                    actions: '', // This removes the actions section that contains the details button
                },
                initialPreview: ['@studentIdCardUrl'].filter(Boolean),
                initialPreviewConfig: [
                    {
                        caption: "Current Student ID Card",
                        size: 0,
                        key: 1
                    }
                ],
                msgPlaceholder: "Select file...",
                msgSelected: "File selected",
                msgProcessing: "Processing...",
                maxFileCount: 1,
                required: @(isStudentImageExist.ToString().ToLower()),  // Note the ! operator
                validateInitialCount: true
            });



            // Update form submission to handle files
            $("#registrationForm").on("submit", function(e) {
                e.preventDefault();
                validateForm();
                if ($(this).valid()) {
                    var formData = new FormData(this);
                    const submitBtn = document.getElementById('btnSubmit');
                    const originalContent = submitBtn.innerHTML;
                    
                    // Change button state while processing
                    submitBtn.disabled = true;
                    submitBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Saving...';
                    
                    $.ajax({
                        url: "/Account/UpdateProfile",
                        type: "POST",
                        data: formData,
                        processData: false,
                        contentType: false,
                        success: function(response) {
                            // Reset button state
                            submitBtn.innerHTML = originalContent;
                            submitBtn.disabled = false;
                            
                            if (response.success) {
                                Swal.fire({
                                    title: response.title,
                                    text: response.message,
                                    icon: "success",
                                    confirmButtonText: "OK"
                                }).then((result) => {
                                    if (result.isConfirmed) {
                                        window.location.href = "/Account/EditProfile";
                                    }
                                });
                            } else {
                                Swal.fire({
                                    title: response.title,
                                    text: response.message,
                                    icon: "error",
                                    confirmButtonText: "OK"
                                });
                            }
                        },
                        error: function() {
                            // Reset button state
                            submitBtn.innerHTML = originalContent;
                            submitBtn.disabled = false;
                            
                            Swal.fire({
                                title: "Error!",
                                text: "An unexpected error occurred. Please try again.",
                                icon: "error",
                                confirmButtonText: "OK"
                            });
                        }
                    });
                }
            });
        });

        function validateForm() {
            $.validator.addMethod("checkUsername", function(value, element) {
                var isValid = false;
                $.ajax({
                    url: '/Account/AjaxCheckDuplicateUsername',
                    type: 'POST',
                    async: false, // Synchronous call for validation
                    data: { username: value, isEditProfile: true },
                    success: function(response) {
                        if (response.success) {
                            isValid = !response.isDuplicate;
                            if (response.isDuplicate) {
                                $.validator.messages.checkUsername = response.message;
                            }
                        }
                    }
                });
                return isValid;
            }, "This username is already taken");
            
            // Add custom validation rules
            $.validator.addMethod("fileSize", function(value, element) {
                return element.files.length === 0 || element.files[0].size <= 2 * 1024 * 1024; // 2MB
            }, "File size must be less than 2MB");

            // Add custom validation method
            $.validator.addMethod("checkEmail", function(value, element) {
                var isValid = false;
                $.ajax({
                    url: '/Account/AjaxCheckDuplicateEmail',
                    type: 'POST',
                    async: false, // Synchronous call for validation
                    data: { email: value, isEditProfile: true },
                    success: function(response) {
                        if (response.success) {
                            isValid = !response.isDuplicate;
                            if (response.isDuplicate) {
                                $.validator.messages.checkUsername = response.message;
                            }
                        }
                    }
                });
                return isValid;
            }, "This email address is already taken");

            $("#registrationForm").validate({
                rules: {
                    Username: {
                        required: true,
                        checkUsername: true,
                        maxlength: 50
                    },
                    EmailAddress: {
                        required: true,
                        checkEmail: true,
                        email: true
                    },
                    FirstName: {
                        required: true,
                        minlength: 2
                    },
                    LastName: {
                        required: true,
                        minlength: 2
                    },
                    DOB: {
                        required: true
                    },
                    Gender: {
                        required: true
                    },
                    PhoneNumber: {
                        required: true,
                        pattern: "^[0-9]{10}$"  // Adjust pattern as needed
                    },
                    EducationStage: {
                        required: true
                    },
                    EducationalYear: {
                        required: true
                    },
                    InstitutionName: {
                        required: true
                    },
                    ProfileImage: {
                        fileSize: true
                    },
                    StudentIdentityCard: {
                        fileSize: true
                    }
                },
                messages: {
                    Username: {
                        required: "Please enter a username",
                        minlength: "Username must be at least 3 characters",
                        maxlength: "Username cannot exceed 50 characters"
                    },
                    EmailAddress: {
                        required: "Please enter your email address",
                        email: "Please enter a valid email address"
                    },
                    Password: {
                        required: "Please enter a password",
                        minlength: "Password must be at least 6 characters"
                    },
                    ConfirmPassword: {
                        required: "Please confirm your password",
                        equalTo: "Passwords do not match"
                    },
                    PhoneNumber: {
                        required: "Please enter your phone number",
                        pattern: "Please enter a valid phone number"
                    },
                    ProfileImage: {
                        fileSize: "Profile image must be less than 2MB"
                    },
                    StudentIdentityCard: {
                        fileSize: "Student ID card image must be less than 2MB"
                    }
                },
                errorElement: 'span',
                errorClass: 'text-danger',
                highlight: function(element, errorClass, validClass) {
                    $(element).addClass('is-invalid');
                },
                unhighlight: function(element, errorClass, validClass) {
                    $(element).removeClass('is-invalid');
                },
                errorPlacement: function (error, element) {
                    //error.insertAfter(element);
                    if (element.closest('.input-group').length > 0) {
                        error.insertAfter(element.parent('.input-group'));
                        error.fadeIn('fast');
                    }
                    else {
                        error.hide();
                        error.insertAfter(element);
                        error.fadeIn('fast');
                    }
                },
            });

            // Add dynamic validation for guardian fields
            function updateGuardianValidation() {
                if ($("#guardianSection").is(":visible")) {
                    $("#GuardianName, #GuardianContact, #GuardianEmail, #GuardianRelationship").rules("add", {
                        required: true
                    });
                } else {
                    $("#GuardianName, #GuardianContact, #GuardianEmail, #GuardianRelationship").rules("remove");
                }
            }

            // Call when age check happens
            $("#DOB").change(function() {
                updateGuardianValidation();
            });
        }

        // Run on page load in case of form validation failure
        document.addEventListener('DOMContentLoaded', function () {
            if (document.getElementById('EducationStage').value) {
                updateEducationalYear();

                // If there's a previously selected value, restore it
                const previousValue = '@Model?.EducationalYear';
                if (previousValue) {
                    document.getElementById('EducationalYear').value = previousValue;
                }
            }
            // Check if jQuery is loaded
            if (typeof jQuery != 'undefined') {
                // Initialize datepicker
                $('.datepicker').datepicker({
                    dateFormat: 'dd-mm-yy',
                    changeMonth: true,
                    changeYear: true,
                    //yearRange: '-100:-6',  // From 100 years ago to 6 years ago
                    maxDate: new Date(new Date().getFullYear() - 6, 11, 31), // Set max date to Dec 31st of 6 years ago
                    onSelect: function (dateText) {
                        if (typeof checkAge === 'function') {
                            checkAge();
                        }
                    },
                    beforeShow: function (input, inst) {
                        // Add custom class for styling
                        setTimeout(function () {
                            inst.dpDiv.find('.ui-datepicker-year').addClass('year-dropdown');
                        }, 0);
                    }
                });
            } else {
                console.error('jQuery is not loaded!');
            }
        });
        
    </script>
}

<style>
    .ui-datepicker {
        font-size: 14px;
        z-index: 1000;
    }

        .ui-datepicker select.ui-datepicker-month,
        .ui-datepicker select.ui-datepicker-year {
            width: 45%;
            padding: 2px;
            height: auto;
        }

    .input-group-text {
        border-left: none;
    }
</style>

