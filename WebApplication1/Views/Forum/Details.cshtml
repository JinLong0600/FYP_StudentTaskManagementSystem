@model StudentTaskManagement.ViewModels.ForumDetailsViewModel
@using static StudentTaskManagement.Utilities.GeneralEnum;
@{
    bool isResolved = !(Model.Status == (int)ForumStatus.Resolved);
}
<div class="container">
    @Html.AntiForgeryToken()
    <div class="row justify-content-center">
        <div class="col-md-8">
            <!-- Forum Post -->
            <div class="card mb-4">
                <div class="card-body p-4">
                    <div class="d-flex justify-content-between align-items-start mb-3">
                        <div class="card-title" style="font-size: 1.4rem; color: #256D85;">
                            @Model.Title
                            @if (Model.Status == (int)ForumStatus.Resolved)
                            {
                                <span class="badge rounded-pill status-resolved ms-2">RESOLVED</span>
                            }
                        </div>
                        <div class="action-buttons">
                            @if (Model.IsAuthor)
                            {
                                <button class="btn-icon edit-btn" onclick="window.location.href='/Forum/CreateForum/@Model.Id'">
                                    <i class="fas fa-edit"></i>
                                </button>
                                <button class="btn-icon delete-btn" onclick="confirmDelete(@Model.Id)">
                                    <i class="fas fa-trash btn-delete"></i>
                                </button>
                            }
                        </div>
                    </div>

                    <div class="post-meta mb-4">
                        <div class="d-flex align-items-center">
                            @if (!string.IsNullOrEmpty(Model.AuthorProfileImage))
                            {
                                <img src="@Model.AuthorProfileImage" 
                                 class="rounded-circle me-2" 
                                 alt="@Model.AuthorName" 
                                 width="32"
                                 height="32">
                            }
                            else
                            {
                                <img src="https://ui-avatars.com/api/?name=@Model.AuthorName&background=random" 
                                 class="rounded-circle me-2" 
                                 alt="@Model.AuthorName" 
                                 width="32" 
                                 height="32">
                            }
                            
                            <span class="fw-bold">@Model.AuthorName</span>
                            <span class="text-muted mx-2">â€¢</span>
                            <span class="text-muted">@Model.CreatedAt.ToString("MMM dd, yyyy HH:mm")</span>
                        </div>
                    </div>

                    <div class="post-content mb-2">
                        @Html.Raw(Model.Content)
                    </div>

                    <div class="mb-2">
                        <!-- Like Button -->
                        <button class="btn like-button @(Model.IsLiked ? "liked" : "")"
                                onclick="toggleLike(@Model.Id)"
                                data-topic-id="@Model.Id">
                            <i class="fas fa-heart @(Model.IsLiked ? "liked" : "")"></i>
                            <span class="like-count">@Model.LikeCount</span>
                        </button>
                    </div>

                    <!-- Tags and Like Button Row -->
                    <div class="d-flex justify-content-between align-items-center">
                        <div class="post-tags">
                            @foreach (var tag in Model.Tags)
                            {
                                <span class="badge rounded-pill tag-badge">
                                    <i class="fas fa-tag me-1"></i>@tag
                                </span>
                            }
                        </div>

                    </div>
                </div>
            </div>

            <!-- Comments Section -->
            <div class="card">
                <div class="card-body p-4">
                    <h3 class="card-title h4 mb-4">Comments</h3>

                    <!-- Add Comment Form -->
                    @if (Model.Status != (int)ForumStatus.Resolved)
                    {
                        <form id="commentForm" class="mb-4">
                            @Html.AntiForgeryToken()
                            <div class="mb-3">
                                <textarea id="commentContent" class="form-control" 
                                        rows="3" placeholder="Write a comment..."></textarea>
                            </div>
                            <button type="submit" class="btn btn-primary">
                                <i class="fas fa-paper-plane"></i> Add Comment
                            </button>
                        </form>
                    }
                    <!-- Comments List -->
                    <div id="commentsList">
                        <!-- Comments will be loaded here -->
                    </div>

                    <!-- Load More Comments -->
                    <div class="text-center mt-4" id="loadMoreContainer" style="display: none;">
                        <button id="loadMoreComments" class="btn btn-outline-primary">
                            Load More Comments
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Styles {
    <style>
        .post-content {
            font-size: 1.1rem;
            line-height: 1.7;
        }

        .tag-badge {
            background: rgba(79, 70, 229, 0.1);
            color: #4f46e5;
            padding: 0.5rem 1rem;
            margin-right: 0.5rem;
            font-weight: 500;
        }

        .comment {
            border-bottom: 1px solid #e2e8f0;
            padding: 1rem 0;
        }

        .comment:last-child {
            border-bottom: none;
        }

        .action-buttons .btn-link {
            padding: 0.25rem 0.5rem;
            font-size: 1.1rem;
        }

        .action-buttons .btn-link:hover {
            transform: translateY(-1px);
        }

        .like-button {
            color: #6c757d;
            transition: all 0.2s ease;
            padding: 4px 12px;
            border-radius: 20px;
            border: 1px solid;
        }

        .like-button:hover {
            background-color: rgba(239, 68, 68, 0.1);
            color: #ef4444;
        }

        .like-button.liked {
            color: #ef4444;
        }

        .fas.fa-heart
        {
            font-weight: 100 !important;
        }

        .fas.fa-heart.liked
        {
            font-weight: 900 !important;
        }

        .like-button i {
            margin-right: 0.5rem;
        }

        .like-count {
            font-size: 0.9rem;
        }

        .status-resolved {
            background-color: #6B7280;  /* Gray-500 color */
            color: white;
            font-size: 0.75rem;
            font-weight: 500;
            padding: 0.35em 0.85em;
            text-transform: uppercase;
            letter-spacing: 0.5px;
            vertical-align: middle;
        }
    </style>
}

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script>
        const isResolved = @Json.Serialize(isResolved);

        let currentPage = 1;
        const pageSize = 10;
        let hasMoreComments = false;

        // Load initial comments when page loads
        $(document).ready(function() {
            loadComments(1);

            // Add comment form submission handler
            $('#commentForm').submit(function (e) {
                e.preventDefault();

                const content = $('#commentContent').val();
                if (!content.trim()) {
                    Swal.fire({
                        icon: 'error',
                        title: 'Error',
                        text: 'Please enter a comment'
                    });
                    return;
                }

                $.ajax({
                    url: '@Url.Action("AjaxAddComment", "Forum")',
                    type: 'POST',
                    data: {
                        topicId: @Model.Id,
                        content: content,
                        __RequestVerificationToken: $('input[name="__RequestVerificationToken"]').val()
                    },
                    success: function (response) {
                        if (response.success) {
                            // Clear the textarea
                            $('#commentContent').val('');

                            // Reload first page of comments to show new comment
                            loadComments(1);

                            // Optional: Show success message
                            Swal.fire({
                                icon: 'success',
                                title: 'Success',
                                text: 'Comment added successfully',
                                timer: 1500,
                                showConfirmButton: false
                            });
                        } else {
                            Swal.fire({
                                icon: 'error',
                                title: 'Error',
                                text: response.message || 'Failed to add comment'
                            });
                        }
                    },
                    error: function () {
                        Swal.fire({
                            icon: 'error',
                            title: 'Error',
                            text: 'Failed to add comment'
                        });
                    }
                });
            });
        });

        // Load comments function
        function loadComments(page) {
            $.ajax({
                url: '@Url.Action("AjaxGetComments", "Forum")',
                type: 'GET',
                data: {
                    topicId: @Model.Id,
                    page: page,
                    pageSize: pageSize
                },
                success: function(response) {
                    const comments = response.comments;
                    hasMoreComments = response.hasMore;
                    
                    if (page === 1) {
                        $('#commentsList').empty();
                    }

                    comments.forEach(comment => {
                        $('#commentsList').append(createCommentHtml(comment));
                    });

                    $('#loadMoreContainer').toggle(hasMoreComments);
                    currentPage = page;
                },
                error: function() {
                    Swal.fire({
                        icon: 'error',
                        title: 'Error',
                        text: 'Failed to load comments'
                    });
                }
            });
        }

        // Load more comments button handler
        $('#loadMoreComments').click(function() {
            loadComments(currentPage + 1);
        });

        // Create HTML for a single comment
        function createCommentHtml(comment) {
            return `
                <div class="comment">
                    <div class="d-flex align-items-start">
                        ${renderImage(comment)}
                        <div class="flex-grow-1">
                            <div class="d-flex justify-content-between align-items-center mb-2">
                                <div>
                                    <span class="fw-bold">${comment.authorName}</span>
                                    <small class="text-muted ms-2">${comment.createdAt}</small>
                                </div>
                                ${comment.isAuthor && isResolved ? `
                                    <div class="comment-actions">
                                        <button class="btn-icon delete-btn" onclick="deleteComment(${comment.id})">
                                            <i class="fas fa-trash btn-delete"></i>
                                        </button>
                                    </div>
                                ` : ''}
                            </div>
                            <div class="comment-content">${comment.content}</div>
                        </div>
                    </div>
                </div>
            `;
        }

        function renderImage(comment) {
            if (comment.authorProfileImage) {
                return `
                        <img src="${comment.authorProfileImage}"
                            class="rounded-circle me-2"
                            alt="${comment.authorName}"
                            width="45"
                            height="45">
                        `;
            } else {
                return `
                        <img src="https://ui-avatars.com/api/?name=${comment.authorName}&background=random"
                            class="rounded-circle me-2"
                            alt="${comment.authorName}"
                            width="32"
                            height="32">
                        `;
            }

        }

        // Optional: Delete comment function
        function deleteComment(commentId) {
            Swal.fire({
                title: 'Are you sure?',
                text: "You won't be able to revert this!",
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Yes, delete it!'
            }).then((result) => {
                if (result.isConfirmed) {
                    $.ajax({
                        url: '@Url.Action("AjaxDeleteComment", "Forum")',
                        type: 'POST',
                        data: {
                            commentId: commentId,
                            __RequestVerificationToken: $('input[name="__RequestVerificationToken"]').val()
                        },
                        success: function(response) {
                            if (response.success) {
                                Swal.fire(
                                    'Deleted!',
                                    'Your comment has been deleted.',
                                    'success'
                                );
                                loadComments(1); // Reload first page
                            } else {
                                Swal.fire(
                                    'Error!',
                                    response.message || 'Failed to delete comment',
                                    'error'
                                );
                            }
                        }
                    });
                }
            });
        }

        function toggleLike(topicId) {
            $.ajax({
                url: '@Url.Action("AjaxToggleLike", "Forum")',
                type: 'POST',
                data: {
                    topicId: topicId,
                    __RequestVerificationToken: $('input[name="__RequestVerificationToken"]').val()
                },
                success: function(response) {
                    if (response.success) {
                        const likeButton = $(`.like-button[data-topic-id="${topicId}"]`);
                        const likeCount = likeButton.find('.like-count');
                        const heartIcon = $(`.fa-heart`);

                        // Toggle liked state
                        if (response.isLiked) {
                            likeButton.addClass('liked');
                            heartIcon.addClass('liked');
                            likeCount.text(parseInt(likeCount.text()) + 1);
                        } else {
                            likeButton.removeClass('liked');
                            heartIcon.removeClass('liked');
                            likeCount.text(parseInt(likeCount.text()) - 1);
                        }
                    } else {
                        Swal.fire({
                            icon: 'error',
                            title: 'Error',
                            text: response.message || 'Failed to update like status'
                        });
                    }
                },
                error: function() {
                    Swal.fire({
                        icon: 'error',
                        title: 'Error',
                        text: 'Failed to update like status'
                    });
                }
            });
        }

        function confirmDelete(forumId) {
            Swal.fire({
                title: 'Are you sure?',
                text: "This post will be permanently deleted!",
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#dc3545',
                cancelButtonColor: '#6c757d',
                confirmButtonText: 'Yes, delete it!',
                cancelButtonText: 'Cancel',
                reverseButtons: true
            }).then((result) => {
                if (result.isConfirmed) {
                    // Show loading state
                    Swal.fire({
                        title: 'Deleting...',
                        allowOutsideClick: false,
                        didOpen: () => {
                            Swal.showLoading();
                        }
                    });

                    // Send delete request
                    $.ajax({
                        url: '/Forum/DeleteForum/' + forumId,
                        type: 'POST',
                        headers: {
                            'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val()
                        },
                        success: function(response) {
                            if (response.success) {
                                Swal.fire({
                                    icon: 'success',
                                    title: 'Deleted!',
                                    text: response.message || 'Your post has been deleted.',
                                    confirmButtonColor: '#4f46e5'
                                }).then(() => {
                                    window.location.href = '/Forum';
                                });
                            } else {
                                Swal.fire({
                                    icon: 'error',
                                    title: 'Error',
                                    text: response.message || 'Failed to delete the post.',
                                    confirmButtonColor: '#4f46e5'
                                });
                            }
                        },
                        error: function() {
                            Swal.fire({
                                icon: 'error',
                                title: 'Error',
                                text: 'Failed to delete the post. Please try again.',
                                confirmButtonColor: '#4f46e5'
                            });
                        }
                    });
                }
            });
        }
    </script>
} 