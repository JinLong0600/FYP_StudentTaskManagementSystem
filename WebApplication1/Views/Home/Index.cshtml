@{
    ViewData["Title"] = "Task Management Dashboard";
}
<link href='https://cdn.jsdelivr.net/npm/fullcalendar@5.11.3/main.css' rel='stylesheet' />
<div class="dashboard-container">
    <!-- Fixed Widget Grid -->
    <div class="widget-grid">
        <!-- Tasks Weekly Overview Widget -->
        <div class="widget">
            <div class="widget-header">
                <div class="widget-title">
                    <h3><i class="fas fa-tasks"></i> Tasks Weekly Overview</h3>
                </div>
                <div class="time-period-selector">
                    <select id="timePeriodSelect" onchange="updateTasksOverview()">
                        <option value="current-week">Current Week</option>
                        <option value="previous-week">Previous Week</option>
                        <option value="next-week">Upcoming Week</option>
                        <option value="this-month">This Month</option>
                    </select>
                </div>
            </div>
            <div class="widget-content">
                <div class="stats-container">
                    <div class="stat-item">
                        <span class="stat-value" id="totalTasks">0</span>
                        <span class="stat-label">Total Tasks</span>
                    </div>
                    <div class="stat-item">
                        <span class="stat-value completed" id="completedTasks">0</span>
                        <span class="stat-label">Completed</span>
                    </div>
                    <div class="stat-item">
                        <span class="stat-value in-progress" id="inProgressTasks">0</span>
                        <span class="stat-label">In Progress</span>
                    </div>
                    <div class="stat-item">
                        <span class="stat-value pending" id="pendingTasks">0</span>
                        <span class="stat-label">Pending</span>
                    </div>
                    <div class="stat-item">
                        <span class="stat-value on-hold" id="onHoldTasks">0</span>
                        <span class="stat-label">On Hold</span>
                    </div>
                    <div class="stat-item">
                        <span class="stat-value overdue" id="overdueTasks">0</span>
                        <span class="stat-label">Overdue</span>
                    </div>
                </div>
                <div class="tasks-progress">
                    <div class="progress-label">
                        <span>Completion Rate</span>
                        <span id="completionRate">0%</span>
                    </div>
                    <div class="progress-bar">
                        <div class="progress" id="completionProgress" style="width: 0%"></div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Weekly Progress Widget -->
        <div class="widget">
            <div class="widget-header">
                <div class="widget-title">
                    <h3><i class="fas fa-chart-bar"></i> Weekly Progress</h3>
                </div>
                <div class="progress-period-selector">
                    <select id="progressPeriodSelect" onchange="updateProgressChart()">
                        <option value="current-week">Current Week</option>
                        <option value="previous-week">Previous Week</option>
                        <option value="previous-month">Previous Month</option>
                    </select>
                </div>
            </div>
            <div class="widget-content">
                <div class="chart-container">
                    <canvas id="progressChart"></canvas>
                </div>
                <div class="chart-legend">
                    <div class="legend-item">
                        <span class="legend-color completed"></span>
                        <span>Completed</span>
                    </div>
                    <div class="legend-item">
                        <span class="legend-color in-progress"></span>
                        <span>In Progress</span>
                    </div>
                    <div class="legend-item">
                        <span class="legend-color on-hold"></span>
                        <span>On Hold</span>
                    </div>
                    <div class="legend-item">
                        <span class="legend-color overdue"></span>
                        <span>Overdue</span>
                    </div>
                </div>
            </div>
        </div>

        <!-- Today's Tasks Widget -->
        <div class="widget">
            <div class="widget-header">
                <div class="widget-title">
                    <h3><i class="fas fa-clock"></i> Today's Tasks</h3>
                </div>
                <div class="task-filter-selector">
                    <select id="taskFilterSelect" onchange="updateTasksList()">
                        <option value="today">Due Today</option>
                        <option value="this-week">This Week (High Priority)</option>
                        <option value="this-month">This Month (High Priority)</option>
                    </select>
                </div>
            </div>
            <div class="widget-content">
                <div class="task-list" id="taskList">
                    <!-- Tasks will be populated dynamically -->
                </div>
                <div class="no-tasks-message" id="noTasksMessage" style="display: none;">
                    <i class="fas fa-info-circle"></i>
                    <p>No high priority tasks found for this period.</p>
                    <p class="pending-note">There are <span id="pendingTaskCount">0</span> pending tasks with normal priority.</p>
                </div>
            </div>
        </div>

        <!-- Deadline Widget -->
        <div class="widget">
            <div class="widget-header">
                <div class="widget-title">
                    <h3><i class="fas fa-clock"></i> Calendar's Tasks</h3>
                </div>
            </div>
            <div class="widget-content">
                <!-- Add FullCalendar container -->
                <div id="calendar"></div>
            </div>
        </div>
    </div>
</div>

<!-- Task Detail Modal -->
<div class="modal" id="taskModal">
    <div class="modal-content">
        <div class="modal-header">
            <h4>Task Details</h4>
            <button class="close-modal" onclick="closeModal()"><i class="fas fa-times"></i></button>
        </div>
        <div class="modal-body">
            <div class="task-details">
                <h3 id="modalTaskTitle"></h3>
                <p id="modalTaskTime"></p>
                <p id="modalTaskDescription"></p>
            </div>
        </div>
    </div>
</div>

<!-- Category Tasks Modal -->
<div class="modal" id="categoryModal">
    <div class="modal-content">
        <div class="modal-header">
            <h4 class="modal-title" id="categoryTitle">Category Tasks</h4>
            <button class="close-modal" onclick="closeModal('categoryModal')">
                <i class="fas fa-times"></i>
            </button>
        </div>
        <div class="modal-body">
            <div class="category-task-list" id="categoryTaskList">
                <!-- Tasks will be populated dynamically -->
            </div>
            <div class="modal-actions">
                <button class="btn btn-primary" onclick="viewAllCategoryTasks()">View All Tasks</button>
            </div>
        </div>
    </div>
</div>

<style>
    /* Dashboard Container */
    .dashboard-container {
        padding: 0 20px 20px 20px;
    }

    /* Widget Grid */
    .widget-grid {
        display: grid;
        grid-template-columns: repeat(2, 1fr);
        gap: 20px;
        max-width: 1400px;
        margin: 0 auto;
    }

    /* Widget Styles */
    .widget {
        background: white;
        border-radius: 10px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        overflow: hidden;
        height: 360px;
        display: flex;
        flex-direction: column;
    }

    .widget-header {
        background: #f8f9fa;
        padding: 15px;
        border-bottom: 1px solid #dee2e6;
        flex-shrink: 0;
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .widget-title h3 {
        margin: 0;
        display: flex;
        align-items: center;
        gap: 10px;
        font-size: 1.1rem;
    }

    .widget-content {
        padding: 20px;
        height: 300px;
        overflow-y: auto;
    }

    /* Stats Container Modifications */
    .stats-container {
        display: grid;
        grid-template-columns: repeat(3, 1fr);
        gap: 15px;
        margin-bottom: 20px;
        padding: 0 10px;
    }

    .stat-item {
        background: #f8f9fa;
        padding: 15px;
        border-radius: 8px;
        transition: transform 0.2s ease;
        text-align: center;
    }

    .stat-item:hover {
        transform: translateY(-2px);
    }

    .stat-value {
        font-size: 1.6rem;
        font-weight: bold;
        display: block;
        margin-bottom: 5px;
    }

    .stat-label {
        color: #666;
        margin-top: 5px;
    }

    /* Task List */
    .task-list {
        height: 260px;
        overflow-y: auto;
        display: flex;
        flex-direction: column;
        gap: 10px;
    }

    .task-item {
        display: flex;
        align-items: center;
        padding: 10px;
        border: 1px solid #eee;
        border-radius: 5px;
        cursor: pointer;
        transition: transform 0.2s ease, box-shadow 0.2s ease;
    }

    .task-item:hover {
        transform: translateY(-2px);
        box-shadow: 0 2px 8px rgba(0,0,0,0.1);
    }

    .task-status {
        width: 10px;
        height: 10px;
        border-radius: 50%;
        margin-right: 10px;
    }

    .task-status.completed { background: #28a745; }
    .task-status.in-progress { background: #ffc107; }

    /* Activity Feed */
    .activity-feed {
        height: 260px;
        overflow-y: auto;
        display: flex;
        flex-direction: column;
        gap: 15px;
    }

    .activity-item {
        display: flex;
        align-items: start;
        gap: 10px;
    }

    .activity-icon {
        color: #2c3e50;
    }

    .activity-details span {
        color: #666;
        font-size: 0.9rem;
    }

    /* Responsive Design */
/*     media (max-width: 1024px) {
        .widget-grid {
            grid-template-columns: 1fr;
        }
    } */

    /* Category Widget Styles */
    .category-list {
        height: 260px;
        overflow-y: auto;
        display: flex;
        flex-direction: column;
        gap: 1rem;
    }

    .category-item {
        background: #f8f9fa;
        border-radius: 8px;
        padding: 1rem;
    }

    .category-header {
        display: flex;
        align-items: center;
        gap: 0.5rem;
        margin-bottom: 0.5rem;
        font-weight: 600;
    }

    .category-stats {
        display: flex;
        justify-content: space-between;
        margin-bottom: 0.5rem;
        font-size: 0.9rem;
    }

    .pending { color: #ffc107; }
    .completed { color: #28a745; }

    .progress-bar {
        height: 6px;
        background: #e9ecef;
        border-radius: 3px;
        overflow: hidden;
    }

    .progress {
        height: 100%;
        background: #3498db;
        border-radius: 3px;
        transition: width 0.3s ease;
    }

    /* Calendar Widget Styles */
    .calendar-view-selector select {
        padding: 6px 12px;
        border: 1px solid #dee2e6;
        border-radius: 4px;
        background-color: white;
        font-size: 0.9rem;
        cursor: pointer;
        outline: none;
    }

    .calendar-view-selector select:hover {
        border-color: #adb5bd;
    }

    #taskCalendar {
        height: 100%;
        padding: 10px;
    }

    /* FullCalendar Customization */
    .fc {
        height: 100%;
        font-family: inherit;
    }

    .fc-toolbar-title {
        font-size: 1.1rem !important;
    }

    .fc-button {
        background-color: #007bff !important;
        border-color: #0056b3 !important;
    }

    .fc-button:hover {
        background-color: #0056b3 !important;
    }

    .fc-event {
        cursor: pointer;
        padding: 2px 4px;
        font-size: 0.85rem;
    }

    /* Priority-based colors */
    .priority-critical { background-color: #dc3545 !important; border-color: #dc3545 !important; }
    .priority-high { background-color: #fd7e14 !important; border-color: #fd7e14 !important; }
    .priority-medium { background-color: #ffc107 !important; border-color: #ffc107 !important; color: #000 !important; }
    .priority-low { background-color: #28a745 !important; border-color: #28a745 !important; }

/* Calendar Styles */
    .calendar-container {
        height: 260px;
        overflow-y: auto;
    }

    .calendar-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 1rem;
    }

    .calendar-header button {
        background: none;
        border: none;
        cursor: pointer;
        padding: 0.5rem;
        border-radius: 50%;
        transition: background 0.3s ease;
    }

    .calendar-header button:hover {
        background: #f8f9fa;
    }

    .calendar-grid {
        height: calc(100% - 40px);
    }

    .calendar-days {
        display: grid;
        grid-template-columns: repeat(7, 1fr);
        text-align: center;
        background: #f8f9fa;
        padding: 0.5rem;
        font-weight: 600;
        font-size: 0.8rem;
    }

    .calendar-dates {
        display: grid;
        grid-template-columns: repeat(7, 1fr);
        grid-template-rows: repeat(5, 1fr);
        gap: 1px;
        height: calc(100% - 30px);
    }

    .calendar-date {
        padding: 5px;
        min-height: 40px;
        max-height: 60px;
        overflow-y: auto;
    }

    .date-number {
        font-size: 0.9rem;
        color: #495057;
    }

    .task-dot {
        width: 100%;
        padding: 2px 4px;
        font-size: 0.7rem;
        background: #dc3545;
        color: white;
        border-radius: 3px;
        cursor: pointer;
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
    }

    .calendar-date.today {
        background: #e8f4ff;
    }

    .calendar-date.different-month {
        background: #f8f9fa;
        color: #adb5bd;
    }

    .deadline-list {
        margin-top: 1rem;
    }

    .deadline-item {
        display: flex;
        gap: 1rem;
        padding: 0.5rem;
        border-bottom: 1px solid #dee2e6;
    }

    .deadline-date {
        font-weight: 600;
        color: #2c3e50;
        min-width: 60px;
    }

    .deadline-info {
        display: flex;
        flex-direction: column;
    }

    .deadline-time {
        font-size: 0.8rem;
        color: #666;
    }

    /* Modal Styles */
    .modal {
        display: none;
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0,0,0,0.5);
        z-index: 1000;
        justify-content: center;
        align-items: center;
    }

    .modal-content {
        background: white;
        border-radius: 8px;
        width: 90%;
        max-width: 500px;
        max-height: 80vh;
        overflow-y: auto;
    }

    .modal-header {
        padding: 1rem;
        border-bottom: 1px solid #dee2e6;
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .modal-body {
        padding: 1rem;
    }

    .close-modal {
        background: none;
        border: none;
        font-size: 1.2rem;
        cursor: pointer;
        color: #666;
    }

    .detail-row {
        margin-bottom: 1rem;
    }

    .detail-label {
        font-weight: 600;
        color: #666;
        min-width: 100px;
        display: inline-block;
    }

    .modal-actions {
        margin-top: 1rem;
        text-align: right;
    }

    .btn {
        padding: 0.5rem 1rem;
        border-radius: 4px;
        cursor: pointer;
        border: none;
    }

    .btn-primary {
        background: #3498db;
        color: white;
    }

    .btn-primary:hover {
        background: #2980b9;
    }

    /* Custom Scrollbar */
    .widget-content::-webkit-scrollbar {
        width: 6px;
    }

    .widget-content::-webkit-scrollbar-track {
        background: #f1f1f1;
        border-radius: 3px;
    }

    .widget-content::-webkit-scrollbar-thumb {
        background: #888;
        border-radius: 3px;
    }

    .widget-content::-webkit-scrollbar-thumb:hover {
        background: #555;
    }

    /* Time Period Selector Styles */
    .time-period-selector {
        margin-bottom: 20px;
        text-align: right;
    }

    .time-period-selector select {
        padding: 8px 12px;
        border: 1px solid #dee2e6;
        border-radius: 4px;
        background-color: white;
        font-size: 0.9rem;
        cursor: pointer;
        outline: none;
    }

    .time-period-selector select:hover {
        border-color: #adb5bd;
    }

    /* Stats Container Modifications */
    .stats-container {
        display: grid;
        grid-template-columns: repeat(3, 1fr);
        gap: 20px;
        margin-bottom: 20px;
        padding: 0 10px;
    }

    .stat-item {
        background: #f8f9fa;
        padding: 15px;
        border-radius: 8px;
        transition: transform 0.2s ease;
    }

    .stat-item:hover {
        transform: translateY(-2px);
    }

    .stat-value {
        font-size: 1.8rem;
        font-weight: bold;
        color: #2c3e50;
        display: block;
        margin-bottom: 5px;
    }

    .stat-label {
        color: #6c757d;
        font-size: 0.9rem;
    }

    /* Progress Bar Styles */
    .tasks-progress {
        padding: 0 10px;
    }

    .progress-label {
        display: flex;
        justify-content: space-between;
        margin-bottom: 8px;
        color: #495057;
        font-size: 0.9rem;
    }

    .progress-bar {
        height: 8px;
        background: #e9ecef;
        border-radius: 4px;
        overflow: hidden;
    }

    .progress {
        height: 100%;
        background: linear-gradient(90deg, #3498db, #2ecc71);
        border-radius: 4px;
        transition: width 0.3s ease;
    }

    /* Task Filter Styles */
    .task-filter-selector select {
        padding: 6px 12px;
        border: 1px solid #dee2e6;
        border-radius: 4px;
        background-color: white;
        font-size: 0.9rem;
        cursor: pointer;
        outline: none;
    }

    .task-filter-selector select:hover {
        border-color: #adb5bd;
    }

    /* Task List Styles */
    .task-list {
        height: 100%;
        overflow-y: auto;
        display: flex;
        flex-direction: column;
        gap: 10px;
        padding: 10px;
    }

    .task-item {
        display: flex;
        align-items: center;
        padding: 15px;
        background: #f8f9fa;
        border-radius: 8px;
        cursor: pointer;
        transition: transform 0.2s ease, box-shadow 0.2s ease;
    }

    .task-item:hover {
        transform: translateY(-2px);
        box-shadow: 0 2px 8px rgba(0,0,0,0.1);
    }

    .task-status {
        width: 10px;
        height: 10px;
        border-radius: 50%;
        margin-right: 15px;
        flex-shrink: 0;
    }

    .task-info {
        flex-grow: 1;
    }

    .task-info h4 {
        margin: 0 0 5px 0;
        font-size: 1rem;
        color: #2c3e50;
    }

    .task-info p {
        margin: 0;
        font-size: 0.85rem;
        color: #6c757d;
    }

    .task-priority {
        padding: 4px 8px;
        border-radius: 4px;
        font-size: 0.75rem;
        font-weight: 600;
        margin-left: 10px;
        flex-shrink: 0;
    }

    .priority-critical {
        background: #dc3545;
        color: white;
    }

    .priority-high {
        background: #fd7e14;
        color: white;
    }

    /* Status Colors */
    .status-pending { background: #ffc107; }
    .status-in-progress { background: #007bff; }
    .status-completed { background: #28a745; }
    .status-overdue { background: #dc3545; }

    /* No Tasks Message Styles */
    .no-tasks-message {
        height: 100%;
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
        text-align: center;
        color: #6c757d;
        padding: 20px;
    }

    .no-tasks-message i {
        font-size: 2rem;
        margin-bottom: 15px;
    }

    .no-tasks-message p {
        margin: 5px 0;
    }

    .pending-note {
        font-size: 0.9rem;
        color: #007bff;
        margin-top: 10px;
    }

    /* Add these new styles for subtasks */
    .task-item {
        display: flex;
        flex-direction: column;
        padding: 15px;
        background: #f8f9fa;
        border-radius: 8px;
        cursor: pointer;
        transition: transform 0.2s ease, box-shadow 0.2s ease;
    }

    .task-main {
        display: flex;
        align-items: center;
        width: 100%;
    }

    .task-subtasks {
        margin-left: 25px;
        margin-top: 10px;
        padding-left: 15px;
        border-left: 2px dashed #dee2e6;
    }

    .subtask-item {
        display: flex;
        align-items: center;
        padding: 8px 0;
        font-size: 0.9rem;
        color: #495057;
    }

    .subtask-status {
        width: 8px;
        height: 8px;
        border-radius: 50%;
        margin-right: 10px;
    }

    .subtask-title {
        flex-grow: 1;
    }

    .subtask-progress {
        font-size: 0.8rem;
        color: #6c757d;
        margin-left: 10px;
    }

    .task-progress {
        display: flex;
        align-items: center;
        margin-top: 8px;
        font-size: 0.85rem;
        color: #6c757d;
    }

    .progress-bar-mini {
        width: 60px;
        height: 4px;
        background: #e9ecef;
        border-radius: 2px;
        margin: 0 8px;
        overflow: hidden;
    }

    .progress-fill {
        height: 100%;
        background: #007bff;
        border-radius: 2px;
        transition: width 0.3s ease;
    }

    .expand-button {
        padding: 2px 8px;
        font-size: 0.8rem;
        color: #6c757d;
        background: none;
        border: 1px solid #dee2e6;
        border-radius: 4px;
        cursor: pointer;
        margin-left: 10px;
    }

    .expand-button:hover {
        background: #e9ecef;
    }

    /* Adjust existing styles */
    .task-info {
        flex-grow: 1;
    }

    .task-info h4 {
        margin: 0 0 5px 0;
        font-size: 1rem;
        color: #2c3e50;
        display: flex;
        align-items: center;
    }

    .subtask-count {
        font-size: 0.75rem;
        color: #6c757d;
        background: #e9ecef;
        padding: 2px 6px;
        border-radius: 10px;
        margin-left: 8px;
    }

    .task-item {
        cursor: pointer;
    }

    .task-item:hover {
        transform: translateY(-2px);
        box-shadow: 0 2px 8px rgba(0,0,0,0.1);
        background-color: #f1f3f5;
    }

    .subtask-item:hover {
        background-color: #e9ecef;
        border-radius: 4px;
    }

    /* Add transition for smooth hover effects */
    .task-item, .subtask-item {
        transition: all 0.2s ease;
    }

    /* Progress Widget Styles */
    .progress-period-selector select {
        padding: 6px 12px;
        border: 1px solid #dee2e6;
        border-radius: 4px;
        background-color: white;
        font-size: 0.9rem;
        cursor: pointer;
        outline: none;
    }

    .progress-period-selector select:hover {
        border-color: #adb5bd;
    }

    .chart-container {
        height: calc(100% - 50px); /* Adjust for legend height */
        padding: 15px;
    }

    .chart-legend {
        display: flex;
        justify-content: center;
        gap: 20px;
        padding: 10px;
        border-top: 1px solid #dee2e6;
    }

    .legend-item {
        display: flex;
        align-items: center;
        gap: 8px;
        font-size: 0.85rem;
        color: #495057;
    }

    .legend-color {
        width: 12px;
        height: 12px;
        border-radius: 2px;
    }

    .legend-color.completed { background-color: #28a745; }
    .legend-color.in-progress { background-color: #007bff; }
    .legend-color.on-hold { background-color: #6c757d; }
    .legend-color.overdue { background-color: #dc3545; }

    #deadlineCalendar {
        height: 500px;
        padding: 10px;
    }

    .fc {
        height: 100%;
    }

    /* Priority-based colors for events */
    .priority-high {
        background-color: #dc3545 !important;
        border-color: #dc3545 !important;
    }

    .priority-medium {
        background-color: #ffc107 !important;
        border-color: #ffc107 !important;
    }

    .priority-low {
        background-color: #28a745 !important;
        border-color: #28a745 !important;
    }

    /* Calendar event styles */
.task-pending {
    background-color: #ffc107 !important;
    border-color: #ffc107 !important;
    color: #000 !important;
}

.task-completed {
    background-color: #28a745 !important;
    border-color: #28a745 !important;
    color: #fff !important;
}

  /* Calendar container styles */
        .fc {
            background: white;
            border-radius: 10px;
            box-shadow: 0 0 20px rgba(0,0,0,0.1);
            padding: 15px;
        }

        /* Header styles */
        .fc-header-toolbar {
            margin-bottom: 1.5em !important;
        }

        .fc-toolbar-title {
            font-size: 1.5em !important;
            font-weight: 600 !important;
            color: #2c3e50;
        }

        /* Remove blue color and underline, make text bold for days and dates */
        .fc-col-header-cell a,
        .fc-daygrid-day-number,
        .fc a {
            color: #333333 !important;
            text-decoration: none !important;
            font-weight: bold !important;
        }

        /* Event styles */
        .fc-event {
            border: none !important;
            border-radius: 6px !important;
            padding: 3px 5px !important;
            margin: 2px 0 !important;
            transition: all 0.3s ease;
        }

        .custom-event {
            display: flex;
            align-items: center;
            gap: 5px;
            padding: 2px;
        }

        /* Popover styles */
        .fc-popover {
            border: none !important;
            border-radius: 12px !important;
            box-shadow: 0 4px 15px rgba(0,0,0,0.15) !important;
            overflow: hidden;
        }

        .fc-popover-header {
            background: #f8f9fa !important;
            padding: 12px !important;
            font-weight: 600;
            color: #2c3e50;
            border-bottom: 1px solid #eee;
        }

        .fc-popover-body {
            padding: 12px !important;
        }

        .fc-popover .fc-event {
            margin: 5px 0 !important;
            padding: 8px 12px !important;
        }

        /* More link styles */
        .fc-more-link {
            background: #f8f9fa;
            padding: 2px 8px;
            border-radius: 15px;
            color: #666;
            font-size: 0.85em;
            font-weight: 500;
            transition: all 0.2s ease;
        }

        .fc-more-link:hover {
            background: #e9ecef;
            color: #333;
        }

        /* Day grid styles */
        .fc-daygrid-day {
            transition: background-color 0.2s;
        }

        .fc-daygrid-day:hover {
            background-color: #f8f9fa;
        }

        .fc-day-today {
            background-color: #e8f4ff !important;
        }

        /* Event hover effects */
        .fc-event:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 8px rgba(0,0,0,0.1);
        }

        /* Complete/Incomplete task styles */
        .fc-event[style*="background-color: rgb(255, 0, 0)"] {
            background: linear-gradient(45deg, #ff4d4d, #ff6666) !important;
            color: white !important;
        }

        .fc-event[style*="background-color: rgb(0, 255, 0)"] {
            background: linear-gradient(45deg, #2ecc71, #27ae60) !important;
            color: white !important;
        }

        /* Other month days */
        .fc .fc-day-other {
            background-color: #f8f9fa;
        }

        .fc .fc-day-other .fc-daygrid-day-number {
            color: #adb5bd !important;
            font-weight: bold !important;
        }

        /* Remove hover color changes */
        .fc-col-header-cell a:hover,
        .fc-daygrid-day-number:hover {
            color: #333333 !important;
        }

        /* Disabled button styles */
        .fc-button:disabled {
            opacity: 0.4;
            cursor: not-allowed !important;
        }

        /* Set fixed height for calendar cells */
        .fc .fc-daygrid-day {
            height: 120px !important; /* Adjust this value as needed */
        }

        /* Ensure content fits within the fixed height */
        .fc .fc-daygrid-day-frame {
            height: 100%;
            min-height: 100%;
        }

        /* Adjust event container height */
        .fc .fc-daygrid-day-events {
            min-height: 0;
            margin-bottom: 0;
        }

        /* Ensure day number positioning */
        .fc .fc-daygrid-day-top {
            flex-direction: row;
            padding: 4px 8px;
        }

        /* Adjust event spacing */
        .fc-daygrid-event-harness {
            margin-top: 2px !important;
            margin-bottom: 2px !important;
        }

        /* Ensure consistent spacing for more link */
        .fc-daygrid-more-link {
            margin: 2px 0;
            padding: 2px 8px;
        }
</style>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src='https://cdn.jsdelivr.net/npm/fullcalendar@5.11.3/main.js'></script>

    <script>
        document.addEventListener('DOMContentLoaded', function() {
            var calendarEl = document.getElementById('calendar');
            
            // Get current date
            var today = new Date();
            var currentMonth = today.getMonth();
            var currentYear = today.getFullYear();

            // Calculate valid date range (1 month before and after current month)
            var validRange = {
                start: new Date(currentYear, currentMonth - 1, 1), // Previous month
                end: new Date(currentYear, currentMonth + 2, 0)    // End of next month
            };

            var calendar = new FullCalendar.Calendar(calendarEl, {
                initialView: 'dayGridMonth',
                headerToolbar: {
                    left: 'prev',
                    center: 'title',
                    right: 'next'
                },
                validRange: validRange,
                navLinks: false,
                dayMaxEvents: 2,
                eventContent: function(arg) {
                    return {
                        html: `
                            <div class="custom-event">
                                <i class="fas ${arg.event.backgroundColor === '#FF0000' ? 'fa-times-circle' : 'fa-check-circle'}"></i>
                                <span>${arg.event.title}</span>
                            </div>
                        `
                    };
                },
                events: [
                    {
                        title: 'Complete Task 1',
                        start: '2024-12-10',
                        backgroundColor: '#00FF00',
                        borderColor: '#00FF00',
                        taskId: 1
                    },
                    {
                        title: 'Incomplete Task 1',
                        start: '2024-12-10',
                        backgroundColor: '#FF0000',
                        borderColor: '#FF0000',
                        taskId: 2
                    },
                    {
                        title: 'Incomplete Task 2',
                        start: '2024-12-10',
                        backgroundColor: '#FF0000',
                        borderColor: '#FF0000',
                        taskId: 3
                    }
                ],
                eventClick: function(info) {
                    window.location.href = '/Task/Details/' + info.event.extendedProps.taskId;
                },
                eventDidMount: function(info) {
                    info.el.style.cursor = 'pointer';
                },
                datesSet: function(info) {
                    var currentView = info.view;
                    var viewStart = currentView.currentStart;
                    
                    if (viewStart <= validRange.start) {
                        document.querySelector('.fc-prev-button').disabled = true;
                    } else {
                        document.querySelector('.fc-prev-button').disabled = false;
                    }
                    
                    if (viewStart >= new Date(validRange.end.getFullYear(), validRange.end.getMonth(), 1)) {
                        document.querySelector('.fc-next-button').disabled = true;
                    } else {
                        document.querySelector('.fc-next-button').disabled = false;
                    }
                },
                dayCellDidMount: function(arg) {
                    var dayEvents = calendar.getEvents().filter(function(event) {
                        return event.start.toDateString() === arg.date.toDateString();
                    });

                    if (dayEvents.length > 0) {
                        var today = new Date();
                        var cellDate = arg.date;
                        
                        if (cellDate < today) {
                            var hasIncomplete = dayEvents.some(function(event) {
                                return event.backgroundColor === '#FF0000';
                            });

                            if (hasIncomplete) {
                                arg.el.style.backgroundColor = '#ffebeb';
                            } else {
                                arg.el.style.backgroundColor = '#ebffeb';
                            }
                        }
                    }
                }
            });
            calendar.render();
        });
    </script>



    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const ctx = document.getElementById('weeklyProgressChart');
            if (ctx) {
                new Chart(ctx, {
                    type: 'line',
                    data: {
                        labels: ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'],
                        datasets: [{
                            label: 'Tasks Completed',
                            data: [5, 8, 6, 9, 12, 8, 7],
                            borderColor: '#2c3e50',
                            tension: 0.1
                        }]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false
                    }
                });
            }
        });
    </script>
    <script>
        // Sample task data - replace with your actual data
        const tasks = {
            '2024-09-15': [
                { title: 'Math Assignment', time: '11:59 PM', description: 'Complete Chapter 5 exercises' }
            ],
            '2024-09-18': [
                { title: 'Physics Lab Report', time: '5:00 PM', description: 'Write up results from today\'s experiment' }
            ]
        };


    
    function showTaskDetails(task) {
        const modal = document.getElementById('taskModal');
        document.getElementById('modalTaskTitle').textContent = task.title;
        document.getElementById('modalTaskTime').textContent = `Due: ${task.time}`;
        document.getElementById('modalTaskDescription').textContent = task.description;
        modal.style.display = 'flex';
    }

    </script>
    <script>
    // Sample data structure for tasks
    const taskData = {
        'current-week': {
            total: 15,
            completed: 8,
            inProgress: 4,
            pending: 3
        },
        'previous-week': {
            total: 12,
            completed: 10,
            inProgress: 2,
            pending: 0
        },
        'next-week': {
            total: 8,
            completed: 0,
            inProgress: 3,
            pending: 5
        },
        'this-month': {
            total: 45,
            completed: 28,
            inProgress: 12,
            pending: 5
        }
    };

    function updateTasksOverview() {
        const selectedPeriod = document.getElementById('timePeriodSelect').value;
        const data = taskData[selectedPeriod];
        
        // Update statistics
        document.getElementById('totalTasks').textContent = data.total;
        document.getElementById('completedTasks').textContent = data.completed;
        document.getElementById('inProgressTasks').textContent = data.inProgress;
        document.getElementById('pendingTasks').textContent = data.pending;
        
        // Calculate and update completion rate
        const completionRate = Math.round((data.completed / data.total) * 100);
        document.getElementById('completionRate').textContent = `${completionRate}%`;
        document.getElementById('completionProgress').style.width = `${completionRate}%`;
    }

    // Initialize with current week data when page loads
    document.addEventListener('DOMContentLoaded', function() {
        updateTasksOverview();
    });
    </script>
}

<script>
    function showTaskModal(taskId) {
        // Populate modal with task details based on taskId
        const modal = document.getElementById('taskModal');
        // Example data - replace with actual task data
        document.getElementById('taskTitle').textContent = "Update Documentation";
        document.getElementById('taskStatus').textContent = "Completed";
        document.getElementById('taskDueDate').textContent = "2024-03-15 11:59 PM";
        document.getElementById('taskDescription').textContent = "Update the project documentation with recent changes...";
        
        modal.style.display = 'flex';
    }

    function showCategoryModal(categoryId) {
        const modal = document.getElementById('categoryModal');
        document.getElementById('categoryTitle').textContent = categoryId.charAt(0).toUpperCase() + categoryId.slice(1);
        
        // Populate category tasks - replace with actual data
        const taskList = document.getElementById('categoryTaskList');
        taskList.innerHTML = `
            <div class="task-item">
                <div class="task-status in-progress"></div>
                <div class="task-info">
                    <h4>Math Assignment</h4>
                    <p>Due tomorrow</p>
                </div>
            </div>
            <!-- Add more tasks -->
        `;
        
        modal.style.display = 'flex';
    }

    function closeModal(modalId) {
        document.getElementById(modalId).style.display = 'none';
    }

    function viewFullDetails() {
        // Navigate to full task details page
        // window.location.href = '/Tasks/Details/' + taskId;
    }

    function viewAllCategoryTasks() {
        // Navigate to category tasks page
        // window.location.href = '/Tasks/Category/' + categoryId;
    }

    // Close modal when clicking outside
    window.onclick = function(event) {
        if (event.target.classList.contains('modal')) {
            event.target.style.display = 'none';
        }
    }
</script>

<script>
// Updated sample task data with subtasks
const taskData = {
    'today': [
        {
            id: 1,
            title: 'Client Meeting Preparation',
            dueTime: '2:00 PM',
            status: 'pending',
            priority: 'critical',
            progress: 60,
            subtasks: [
                { id: 11, title: 'Prepare Presentation', status: 'completed', progress: 100 },
                { id: 12, title: 'Review Documents', status: 'in-progress', progress: 70 },
                { id: 13, title: 'Set up Meeting Room', status: 'pending', progress: 0 }
            ]
        },
        {
            id: 2,
            title: 'Project Deadline Review',
            dueTime: '4:30 PM',
            status: 'in-progress',
            priority: 'high',
            progress: 40,
            subtasks: [
                { id: 21, title: 'Update Timeline', status: 'completed', progress: 100 },
                { id: 22, title: 'Review Deliverables', status: 'pending', progress: 0 }
            ]
        }
    ],
    // ... other time periods ...
};

function updateTasksList() {
    const selectedFilter = document.getElementById('taskFilterSelect').value;
    const taskList = document.getElementById('taskList');
    const noTasksMessage = document.getElementById('noTasksMessage');
    const tasks = taskData[selectedFilter];

    if (tasks && tasks.length > 0) {
        taskList.style.display = 'flex';
        noTasksMessage.style.display = 'none';
        
        taskList.innerHTML = tasks.map(task => `
            <div class="task-item" id="task-${task.id}" onclick="navigateToTaskDetails(${task.id})">
                <div class="task-main">
                    <div class="task-status status-${task.status}"></div>
                    <div class="task-info">
                        <h4>
                            ${task.title}
                            ${task.subtasks ? 
                                `<span class="subtask-count">${task.subtasks.length} subtasks</span>` : 
                                ''}
                        </h4>
                        <p>Due: ${task.dueTime}</p>
                        ${task.subtasks ? `
                            <div class="task-progress">
                                <span>Progress:</span>
                                <div class="progress-bar-mini">
                                    <div class="progress-fill" style="width: ${task.progress}%"></div>
                                </div>
                                <span>${task.progress}%</span>
                                <button class="expand-button" onclick="toggleSubtasks(${task.id}, event)">
                                    <i class="fas fa-chevron-down"></i>
                                </button>
                            </div>
                        ` : ''}
                    </div>
                    <span class="task-priority priority-${task.priority.toLowerCase()}">
                        ${task.priority}
                    </span>
                </div>
                ${task.subtasks ? `
                    <div class="task-subtasks" id="subtasks-${task.id}" style="display: none;">
                        ${task.subtasks.map(subtask => `
                            <div class="subtask-item" onclick="navigateToTaskDetails(${task.id}, ${subtask.id}, event)">
                                <div class="subtask-status status-${subtask.status}"></div>
                                <span class="subtask-title">${subtask.title}</span>
                                <span class="subtask-progress">${subtask.progress}%</span>
                            </div>
                        `).join('')}
                    </div>
                ` : ''}
            </div>
        `).join('');
    } else {
        taskList.style.display = 'none';
        noTasksMessage.style.display = 'flex';
        document.getElementById('pendingTaskCount').textContent = 
            pendingTasksCount[selectedFilter] || 0;
    }
}

// Add navigation function
function navigateToTaskDetails(taskId, subtaskId = null, event = null) {
    if (event) {
        event.stopPropagation(); // Prevent parent task click event when clicking subtask
    }
    
    // If subtaskId is provided, navigate to subtask detail view
    if (subtaskId) {
        window.location.href = `/Tasks/Details/${taskId}/Subtask/${subtaskId}`;
    } else {
        // Navigate to main task detail view
        window.location.href = `/Tasks/Details/${taskId}`;
    }
}

// Update toggleSubtasks to prevent navigation when expanding/collapsing
function toggleSubtasks(taskId, event) {
    event.stopPropagation(); // Prevent task click event
    const subtasksElement = document.getElementById(`subtasks-${taskId}`);
    const button = event.currentTarget;
    const icon = button.querySelector('i');
    
    if (subtasksElement.style.display === 'none') {
        subtasksElement.style.display = 'block';
        icon.classList.replace('fa-chevron-down', 'fa-chevron-up');
    } else {
        subtasksElement.style.display = 'none';
        icon.classList.replace('fa-chevron-up', 'fa-chevron-down');
    }
}

// Initialize the task list when page loads
document.addEventListener('DOMContentLoaded', function() {
    updateTasksList();
});
</script>

<script>
// Sample progress data
const progressData = {
    'current-week': {
        labels: ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday'],
        datasets: [
            {
                label: 'Completed',
                data: [3, 5, 4, 6, 4],
                backgroundColor: '#28a745'
            },
            {
                label: 'In Progress',
                data: [2, 3, 4, 2, 3],
                backgroundColor: '#007bff'
            },
            {
                label: 'On Hold',
                data: [1, 2, 1, 1, 2],
                backgroundColor: '#6c757d'
            },
            {
                label: 'Overdue',
                data: [1, 0, 2, 1, 1],
                backgroundColor: '#dc3545'
            }
        ]
    },
    'previous-week': {
        labels: ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday'],
        datasets: [
            {
                label: 'Completed',
                data: [4, 6, 5, 7, 5],
                backgroundColor: '#28a745'
            },
            {
                label: 'In Progress',
                data: [3, 2, 3, 2, 2],
                backgroundColor: '#007bff'
            },
            {
                label: 'On Hold',
                data: [1, 1, 2, 1, 1],
                backgroundColor: '#6c757d'
            },
            {
                label: 'Overdue',
                data: [0, 1, 1, 0, 1],
                backgroundColor: '#dc3545'
            }
        ]
    },
    'previous-month': {
        labels: ['Week 1', 'Week 2', 'Week 3', 'Week 4'],
        datasets: [
            {
                label: 'Completed',
                data: [20, 25, 22, 28],
                backgroundColor: '#28a745'
            },
            {
                label: 'In Progress',
                data: [10, 12, 15, 8],
                backgroundColor: '#007bff'
            },
            {
                label: 'On Hold',
                data: [5, 8, 6, 7],
                backgroundColor: '#6c757d'
            },
            {
                label: 'Overdue',
                data: [3, 2, 4, 2],
                backgroundColor: '#dc3545'
            }
        ]
    }
};

let progressChart = null;

function updateProgressChart() {
    const selectedPeriod = document.getElementById('progressPeriodSelect').value;
    const ctx = document.getElementById('progressChart').getContext('2d');
    const data = progressData[selectedPeriod];

    if (progressChart) {
        progressChart.destroy();
    }

    progressChart = new Chart(ctx, {
        type: 'bar',
        data: data,
        options: {
            responsive: true,
            maintainAspectRatio: false,
            scales: {
                x: {
                    stacked: true,
                    grid: {
                        display: false
                    }
                },
                y: {
                    stacked: true,
                    beginAtZero: true,
                    ticks: {
                        stepSize: 1
                    }
                }
            },
            plugins: {
                legend: {
                    display: false
                },
                tooltip: {
                    mode: 'index',
                    intersect: false
                }
            },
            interaction: {
                mode: 'nearest',
                intersect: false
            }
        }
    });
}

// Initialize chart when page loads
document.addEventListener('DOMContentLoaded', function() {
    updateProgressChart();
});
</script>