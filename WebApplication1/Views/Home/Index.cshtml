@using static StudentTaskManagement.Utilities.GeneralEnum;
@{
    ViewData["Title"] = "Task Management Dashboard";
}
<div class="dashboard-container">
    <!-- Fixed Widget Grid -->
    <div class="widget-grid">
        
        <!-- Today's Tasks Widget -->
        <div class="widget">
            <div class="widget-header" style="background: linear-gradient(135deg, #4FAECE, #1A4B6E);">
                <div class="widget-title">
                    <h3><i class="fas fa-clock"></i> Due soon</h3>
                </div>
                <div class="task-filter-selector">
                    <select id="taskFilterSelect" onchange="updateTasksList()">
                        <option value="today">Due Today</option>
                        <option value="thisWeek">Due this week</option>
                        <option value="thisMonth">Due this month</option>
                    </select>
                </div>
            </div>
            <div class="widget-content">
                <div class="task-list" id="taskList">
                    <!-- Tasks will be populated dynamically -->
                </div>
                <div class="no-tasks-message" id="noTasksMessage" style="display: none;">
                    <i class="fas fa-info-circle"></i>
                    <p>There is no task that will be due.</p>
                </div>
            </div>
        </div>

        <!-- My Forum Posts Widget -->
        <div class="widget">
            <div class="widget-header" style="padding: 1.4rem !important; background: linear-gradient(135deg, #1A4B6E, #4FAECE);">
                <div class="widget-title">
                    <h3><i class="fas fa-comments"></i> My Recent Posts</h3>
                </div>
            </div>
            <div class="widget-content">
                <div class="forum-posts-list" id="forumPostsList">
                    <!-- Posts will be loaded here -->
                </div>

            </div>
        </div>
        <!-- Tasks Weekly Overview Widget -->
        <div class="widget">
            <div class="widget-header" style="background: linear-gradient(135deg, #4FAECE, #1A4B6E);">
                <div class="widget-title">
                    <h3><i class="fas fa-tasks"></i> Tasks Overview</h3>
                </div>
                <div class="time-period-selector">
                    <select id="timePeriodSelect" onchange="updateTasksOverview()">
                        <option value="@((int)updateTasksOverview.CurrWeek)">Current Week</option>
                        <option value="@((int)updateTasksOverview.UpcomingWeek)">Upcoming Week</option>
                        <option value="@((int)updateTasksOverview.PreviousWeek)">Previous Week</option>
                        <option value="@((int)updateTasksOverview.ThisMonth)">This Month</option>
                    </select>
                </div>
            </div>
            <div class="widget-content-task-weekly">
                <div class="stats-container">
                    <div class="stat-item">
                        <span class="stat-value" id="totalTasks"></span>
                        <span class="stat-label">Total Tasks</span>
                    </div>
                    <div class="stat-item">
                        <span class="stat-value completed" id="completedTasks"></span>
                        <span class="stat-label">Completed</span>
                    </div>
                    <div class="stat-item">
                        <span class="stat-value overdue" id="overdueTasks"></span>
                        <span class="stat-label">Overdue</span>
                    </div>
                    <div class="stat-item">
                        <span class="stat-value notstarted" id="pendingTasks"></span>
                        <span class="stat-label">Not Started</span>
                    </div>
                    <div class="stat-item">
                        <span class="stat-value inprogress" id="inProgressTasks"></span>
                        <span class="stat-label">In Progress</span>
                    </div>
                    <div class="stat-item">
                        <span class="stat-value onhold" id="onHoldTasks"></span>
                        <span class="stat-label">On Hold</span>
                    </div>

                </div>
            </div>
        </div>

        <!-- Weekly Progress Widget -->
        <div class="widget">
            <div class="widget-header" style="background: linear-gradient(135deg, #1A4B6E, #4FAECE);">
                <div class="widget-title">
                    <h3><i class="fa-solid fa-chart-simple"></i> Task Overview (Chart)</h3>
                </div>
                <div class="progress-period-selector">
                    <select id="progressPeriodSelect" onchange="updateProgressChart()">
                        <option value="@((int)updateTasksOverview.CurrWeek)">Current Week</option>
                        <option value="@((int)updateTasksOverview.UpcomingWeek)">Upcoming Week</option>
                        <option value="@((int)updateTasksOverview.PreviousWeek)">Previous Week</option>
                        <option value="@((int)updateTasksOverview.ThisMonth)">This Month</option>
                    </select>
                </div>
            </div>
            <div class="widget-content">
                <div class="chart-container">
                    <canvas id="progressChart"></canvas>
                </div>
                <div class="chart-legend">
                    <div class="legend-item">
                        <span class="legend-color completed"></span>
                        <span>Completed</span>
                    </div>
                    <div class="legend-item">
                        <span class="legend-color overdue"></span>
                        <span>Overdue</span>
                    </div>
                    <div class="legend-item">
                        <span class="legend-color notstarted"></span>
                        <span>Not started</span>
                    </div>
                    <div class="legend-item">
                        <span class="legend-color inprogress"></span>
                        <span>In Progress</span>
                    </div>
                    <div class="legend-item">
                        <span class="legend-color onhold"></span>
                        <span>On Hold</span>
                    </div>

                </div>
            </div>
        </div>

    </div>
</div>

@section Styles {
    <style>
        :root {
            --primary-color: #4f46e5;
            --primary-hover: #4338ca;
            --bg-gradient: linear-gradient(135deg, #4f46e5 0%, #7c3aed 100%);
        }

        .container {
            max-width: 1200px;
        }

        /* Card Styling */
        .forum-card {
            border: 1px solid rgba(0,0,0,.1);
            border-radius: 16px;
            transition: all 0.3s ease;
        }

            .forum-card:hover {
                transform: translateY(-2px);
                box-shadow: 0 4px 15px rgba(0,0,0,0.1);
            }

        /* Latest Post */
        .latest-post {
            background-color: #f5f5f5;
            padding: 1rem;
            border-radius: 12px;
        }

        /* Badge Styling */
        .badge.rounded-pill {
            font-size: 0.75rem;
            padding: 0.35em 0.8em;
            font-weight: 500;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }

            .badge.rounded-pill.interaction {
                font-size: 0.85rem;
                padding: 4px 8px;
                font-weight: 500;
                text-transform: uppercase;
                letter-spacing: 0.5px;
                margin-right: 0.5rem;
            }

        .badge.bg-primary {
            background: var(--bg-gradient) !important;
            font-size: 0.65rem;
            padding: 4px 8px;
        }

        .d-flex.align-items-start.flex-column {
            gap: 0.25rem;
        }

        /* Search Bar */
        .input-group {
            border-radius: 12px;
            overflow: hidden;
            box-shadow: 0 2px 8px rgba(0,0,0,.05);
        }

        .input-group-text {
            border: none;
            background-color: white;
            padding-left: 20px;
        }

        .input-group .form-control {
            border: none;
            padding: 12px;
            font-size: 1rem;
        }

        .input-group .btn-outline-secondary {
            border-color: #e2e8f0;
            color: #64748b;
            padding: 12px 24px;
            border-radius: 0;
            border-left: none;
        }

            .input-group .btn-outline-secondary:hover {
                background-color: #f8fafc;
                border-color: #e2e8f0;
                color: #475569;
            }

        /* Description Text */
        .text-muted {
            line-height: 1.5;
        }

        /* Tags Styling */
        .tags-container {
            display: flex;
            flex-wrap: wrap;
            gap: 0.5rem;
            margin-top: 0.5rem;
            font-size: 0.75rem;
        }

        .tag-badge {
            background: rgba(79, 70, 229, 0.1);
            color: var(--primary-color);
            font-size: 0.75rem;
            padding: 0.35em 0.8em;
            font-weight: 500;
            transition: all 0.2s ease;
            cursor: pointer;
        }

            .tag-badge:hover {
                background: rgba(79, 70, 229, 0.15);
                transform: translateY(-1px);
            }

        /* Comment Count Badge */
        .badge.bg-light {
            background-color: #f1f5f9 !important;
            color: #64748b !important;
            border: 1px solid #e2e8f0;
            padding: 0.35em 0.8em;
        }

            .badge.bg-light i {
                color: #64748b;
                margin-right: 0.25rem;
            }

                .badge.bg-light i.fa-heart {
                    color: #ef4444; /* Red color for heart icon */
                }

        /* Pagination Styling */
        .pagination .page-link {
            color: var(--primary-color);
            border: 1px solid #e2e8f0;
            padding: 0.5rem 1rem;
            margin: 0 0.25rem;
            border-radius: 8px;
            transition: all 0.2s ease;
        }

        .pagination .page-item.active .page-link {
            background: var(--bg-gradient);
            border-color: transparent;
            color: white;
        }

        .pagination .page-item.disabled .page-link {
            color: #94a3b8;
            background-color: #f1f5f9;
            border-color: #e2e8f0;
        }

        .pagination .page-link:hover:not(.disabled) {
            background-color: #f8fafc;
            border-color: #e2e8f0;
            transform: translateY(-1px);
        }

        .description-container {
            border: 1px solid rgba(0, 0, 0, 0.1);
            border-radius: 8px;
            padding: 8px;
            margin-bottom: 0.75rem;
            background-color: #f8f9fa;
        }

        .description-container-transparent {
            min-height: 45px;
            margin-bottom: 1rem;
        }

        .description-text {
            display: -webkit-box;
            -webkit-box-orient: vertical;
            overflow: hidden;
            margin-bottom: 0;
            line-height: 1;
            font-size: 0.85rem;
            -webkit-line-clamp: 3; /* Show only 3 lines */
        }

        .tag-input-container {
            display: flex;
            flex-wrap: wrap;
            gap: 5px;
            padding: 5px;
            min-height: 38px;
            align-items: center;
        }

        .tag-input {
            border: none;
            outline: none;
            flex: 1;
            min-width: 60px;
            padding: 2px;
        }

        .tag-list {
            display: flex;
            flex-wrap: wrap;
            gap: 5px;
        }

        .tag-item {
            background: rgba(79, 70, 229, 0.1);
            color: var(--primary-color);
            padding: 2px 8px;
            border-radius: 15px;
            font-size: 0.875rem;
            display: flex;
            align-items: center;
            gap: 5px;
        }

            .tag-item .remove-tag {
                cursor: pointer;
                font-size: 14px;
                display: inline-flex;
                align-items: center;
                justify-content: center;
            }

                .tag-item .remove-tag:hover {
                    color: #dc3545;
                }

        .form-label {
            font-weight: 500;
            margin-bottom: 0.5rem;
            color: #4b5563;
        }

        .status-resolved {
            background-color: #6B7280; /* Gray-500 color */
            color: white;
            font-size: 0.65rem;
            font-weight: 500;
            padding: 4px 8px;
            text-transform: uppercase;
            letter-spacing: 0.5px;
            border-radius: 20px;
            display: inline-flex;
            align-items: center;
        }

        .task-priority {
            width: 100px;  /* Fixed width */
            height: 45px;  /* Fixed height */
            padding: 5px;
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            border-radius: 4px;
            margin-left: 10px;
            text-align: center;
        }
    </style>
}
<style>
    /* Dashboard Container */
    .dashboard-container {
        padding: 0 20px 20px 20px;
    }

    /* Widget Grid */
    .widget-grid {
        display: grid;
        grid-template-columns: repeat(2, 1fr);
        gap: 20px;
        max-width: 1400px;
        margin: 0 auto;
    }

    /* Widget Styles */
    .widget {
        background: white;
        border-radius: 10px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        overflow: hidden;
        height: 360px;
        display: flex;
        flex-direction: column;
    }

    .widget-header {
        color: white;
        padding: 15px;
        border-bottom: 1px solid #dee2e6;
        flex-shrink: 0;
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .widget-title h3 {
        margin: 0;
        display: flex;
        align-items: center;
        gap: 10px;
        font-size: 1.1rem;
    }

    .widget-content-task-weekly {
        padding: 20px;
        height: 300px;
    }

    .widget-content {
        padding: 20px;
        height: 300px;
        overflow-y: auto;
    }
    /* Stats Container Modifications */
    .stats-container {
        display: grid;
        grid-template-columns: repeat(3, 1fr);
        gap: 15px;
        margin-bottom: 20px;
        padding: 0 10px;
    }

    .stat-item {
        background: #f8f9fa;
        padding: 15px;
        border-radius: 8px;
        transition: transform 0.2s ease;
        text-align: center;
    }

        .stat-item:hover {
            transform: translateY(-2px);
        }

    .stat-value {
        font-size: 1.6rem;
        font-weight: bold;
        display: block;
        margin-bottom: 5px;
    }

        .stat-value.completed {
            color: #18892d;
        }

        .stat-value.overdue {
            color: #d01f1f;
        }

        .stat-value.notstarted {
            color: #939393;
        }

        .stat-value.inprogress {
            color: #00549d;
        }

        .stat-value.onhold {
            color: #ff9606;
        }

    .stat-label {
        color: #666;
        margin-top: 5px;
    }

    /* Task List */
    .task-list {
        height: 260px;
        overflow-y: auto;
        display: flex;
        flex-direction: column;
        gap: 10px;
    }

    .task-item {
        display: flex;
        align-items: center;
        padding: 10px;
        border: 1px solid #eee;
        border-radius: 5px;
        cursor: pointer;
        transition: transform 0.2s ease, box-shadow 0.2s ease;
    }

        .task-item:hover {
            transform: translateY(-2px);
            box-shadow: 0 2px 8px rgba(0,0,0,0.1);
        }

    .task-status {
        width: 10px;
        height: 10px;
        border-radius: 50%;
        margin-right: 10px;
    }

        .task-status.completed {
            background: #28a745;
        }

        .task-status.in-progress {
            background: #ffc107;
        }


    .pending {
        color: #ffc107;
    }

    .completed {
        color: #28a745;
    }

    .progress-bar {
        height: 6px;
        background: #e9ecef;
        border-radius: 3px;
        overflow: hidden;
    }

    .progress {
        height: 100%;
        background: #3498db;
        border-radius: 3px;
        transition: width 0.3s ease;
    }

    /* Priority-based colors */
    .priority-critical {
        background-color: black !important;
        border-color: black !important;
    }
    .priority-high {
        background-color: #DC3545 !important;
        border-color: #DC3545 !important;
    }

    .priority-medium {
        background-color: #FFA33B !important;
        border-color: #FFA33B !important;
    }

    .priority-low {
        background-color: #43A047 !important;
        border-color: #43A047 !important;
    }

    .priority-trivial {
        background-color: #78909C !important;
        border-color: #78909C !important;
    }

    /* Modal Styles */
    .modal {
        display: none;
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0,0,0,0.5);
        z-index: 1000;
        justify-content: center;
        align-items: center;
    }

    .modal-content {
        background: white;
        border-radius: 8px;
        width: 90%;
        max-width: 500px;
        max-height: 80vh;
        overflow-y: auto;
    }

    .modal-header {
        padding: 1rem;
        border-bottom: 1px solid #dee2e6;
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .modal-body {
        padding: 1rem;
    }

    .close-modal {
        background: none;
        border: none;
        font-size: 1.2rem;
        cursor: pointer;
        color: #666;
    }

    .detail-row {
        margin-bottom: 1rem;
    }

    .detail-label {
        font-weight: 600;
        color: #666;
        min-width: 100px;
        display: inline-block;
    }

    .modal-actions {
        margin-top: 1rem;
        text-align: right;
    }

    .btn {
        padding: 0.5rem 1rem;
        border-radius: 4px;
        cursor: pointer;
        border: none;
    }

    .btn-primary {
        background: #3498db;
        color: white;
    }

        .btn-primary:hover {
            background: #2980b9;
        }

    /* Custom Scrollbar */
    .widget-content::-webkit-scrollbar {
        width: 6px;
    }

    .widget-content::-webkit-scrollbar-track {
        background: #f1f1f1;
        border-radius: 3px;
    }

    .widget-content::-webkit-scrollbar-thumb {
        background: #888;
        border-radius: 3px;
    }

        .widget-content::-webkit-scrollbar-thumb:hover {
            background: #555;
        }

    /* Time Period Selector Styles */
    .time-period-selector {
        text-align: right;
    }

        .time-period-selector select {
            padding: 8px 12px;
            border: 1px solid #dee2e6;
            border-radius: 4px;
            background-color: white;
            font-size: 0.9rem;
            cursor: pointer;
            outline: none;
        }

            .time-period-selector select:hover {
                border-color: #adb5bd;
            }

    /* Stats Container Modifications */
    .stats-container {
        display: grid;
        grid-template-columns: repeat(3, 1fr);
        gap: 20px;
        margin-bottom: 20px;
        padding: 0 10px;
    }

    .stat-value {
        font-size: 1.8rem;
        font-weight: bold;
        color: #2c3e50;
        display: block;
        margin-bottom: 5px;
    }

    .stat-label {
        color: #6c757d;
        font-size: 0.9rem;
    }


    /* Task Filter Styles */
    .task-filter-selector select {
        padding: 6px 12px;
        border: 1px solid #dee2e6;
        border-radius: 4px;
        background-color: white;
        font-size: 0.9rem;
        cursor: pointer;
        outline: none;
    }

        .task-filter-selector select:hover {
            border-color: #adb5bd;
        }

    /* Task List Styles */
    .task-list {
        height: 100%;
        overflow-y: auto;
        display: flex;
        flex-direction: column;
        gap: 10px;
        padding: 10px;
    }

    .task-item {
        display: flex;
        align-items: center;
        padding: 15px;
        background: #f8f9fa;
        border-radius: 8px;
        cursor: pointer;
        transition: transform 0.2s ease, box-shadow 0.2s ease;
    }

        .task-item:hover {
            transform: translateY(-2px);
            box-shadow: 0 2px 8px rgba(0,0,0,0.1);
        }

    .task-status {
        width: 15px;
        height: 25px;
        border-radius: 15px;
        margin-right: 15px;
        flex-shrink: 0;
    }

    .task-info {
        flex-grow: 1;
    }

        .task-info h4 {
            margin: 0 0 5px 0;
            font-size: 1rem;
            color: #2c3e50;
        }

        .task-info p {
            margin: 0;
            font-size: 0.85rem;
            color: #6c757d;
        }

    .task-priority {
        padding: 4px 8px;
        border-radius: 4px;
        font-size: 0.75rem;
        font-weight: 600;
        margin-left: 10px;
        flex-shrink: 0;
        color: white;
        font-weight: 600;
    }

    /* Status Colors */
    .status-overdue {
        background: #d01f1f;
    }

    .status-completed {
        background: #18892d;
    }

    .status-notstarted {
        background: #939393;
    }

    .status-inprogress {
        background: #00549d;
    }

    .status-onhold {
        background: #ff9606;
    }

    /* No Tasks Message Styles */
    .no-tasks-message {
        height: 100%;
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
        text-align: center;
        color: #6c757d;
        padding: 20px;
    }

        .no-tasks-message i {
            font-size: 2rem;
            margin-bottom: 15px;
        }

        .no-tasks-message p {
            margin: 5px 0;
        }

    .pending-note {
        font-size: 0.9rem;
        color: #007bff;
        margin-top: 10px;
    }

    /* Add these new styles for subtasks */
    .task-item {
        display: flex;
        flex-direction: column;
        padding: 15px;
        background: #f8f9fa;
        border-radius: 8px;
        cursor: pointer;
        transition: transform 0.2s ease, box-shadow 0.2s ease;
    }

    .task-main {
        display: flex;
        align-items: center;
        width: 100%;
    }

    .task-subtasks {
        margin-left: 25px;
        margin-top: 10px;
        padding-left: 15px;
        border-left: 2px dashed #dee2e6;
    }

    .subtask-item {
        display: flex;
        align-items: center;
        padding: 8px 0;
        font-size: 0.8rem;
        color: #495057;
    }

    .subtask-status {
        width: 8px;
        height: 8px;
        border-radius: 50%;
        margin-right: 10px;
    }

    .subtask-title {
        flex-grow: 1;
        font-weight: 500;
    }

    .subtask-progress {
        font-size: 0.8rem;
        color: #6c757d;
        margin-left: 10px;
    }

    .task-progress {
        display: flex;
        align-items: center;
        margin-top: 8px;
        font-size: 0.85rem;
        color: #6c757d;
    }

    .progress-bar-mini {
        width: 60px;
        height: 4px;
        background: #e9ecef;
        border-radius: 2px;
        margin: 0 8px;
        overflow: hidden;
    }

    .progress-fill {
        height: 100%;
        background: #007bff;
        border-radius: 2px;
        transition: width 0.3s ease;
    }

    .expand-button {
        padding: 2px 8px;
        font-size: 0.8rem;
        color: #6c757d;
        background: none;
        border: 1px solid #dee2e6;
        border-radius: 4px;
        cursor: pointer;
        margin-left: 10px;
    }

        .expand-button:hover {
            background: #e9ecef;
        }

    /* Adjust existing styles */
    .task-info {
        flex-grow: 1;
    }

        .task-info h4 {
            margin: 0 0 5px 0;
            font-size: 1rem;
            color: #2c3e50;
            display: flex;
            align-items: center;
        }

    .subtask-count {
        font-size: 0.75rem;
        color: #6c757d;
        background: #e9ecef;
        padding: 2px 6px;
        border-radius: 10px;
        margin-left: 8px;
    }

    .task-item {
        cursor: pointer;
    }

        .task-item:hover {
            transform: translateY(-2px);
            box-shadow: 0 2px 8px rgba(0,0,0,0.1);
            background-color: #f1f3f5;
        }

    .subtask-item:hover {
        background-color: #e9ecef;
        border-radius: 4px;
    }

    /* Add transition for smooth hover effects */
    .task-item, .subtask-item {
        transition: all 0.2s ease;
    }

    /* Progress Widget Styles */
    .progress-period-selector select {
        padding: 6px 12px;
        border: 1px solid #dee2e6;
        border-radius: 4px;
        background-color: white;
        font-size: 0.9rem;
        cursor: pointer;
        outline: none;
    }

        .progress-period-selector select:hover {
            border-color: #adb5bd;
        }

    .chart-container {
        height: calc(100% - 50px); /* Adjust for legend height */
        padding: 15px;
    }

    .chart-legend {
        display: flex;
        justify-content: center;
        gap: 20px;
        padding: 10px;
        border-top: 1px solid #dee2e6;
    }

    .legend-item {
        display: flex;
        align-items: center;
        gap: 8px;
        font-size: 0.85rem;
        color: #495057;
    }

    .legend-color {
        width: 12px;
        height: 12px;
        border-radius: 2px;
    }

        .legend-color.completed {
            background-color: #18892d;
        }

        .legend-color.inprogress {
            background-color: #00549d;
        }

        .legend-color.onhold {
            background-color: #ff9606;
        }

        .legend-color.overdue {
            background-color: #d01f1f;
        }

        .legend-color.notstarted {
            background-color: #939393;
        }

    /* Calendar event styles */
    .task-pending {
        background-color: #ffc107 !important;
        border-color: #ffc107 !important;
        color: #000 !important;
    }

    .task-completed {
        background-color: #28a745 !important;
        border-color: #28a745 !important;
        color: #fff !important;
    }
</style>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
        function updateTasksOverview() {
            const selectedPeriod = document.getElementById('timePeriodSelect').value;

            // Make AJAX call
            $.ajax({
                url: '/Home/AjaxGetTaskCount',  // Update this to your actual API endpoint
                method: 'GET',
                data: { period: selectedPeriod },
                success: function (response) {
                    document.getElementById('totalTasks').textContent = response.data.totalTask ? response.data.totalTask : "0";
                    document.getElementById('completedTasks').textContent = response.data.completedTask ? response.data.completedTask : "0";
                    document.getElementById('inProgressTasks').textContent = response.data.inProgressTask ? response.data.inProgressTask : "0";
                    document.getElementById('pendingTasks').textContent = response.data.NotStartedTask ? response.data.NotStartedTask : "0";
                    document.getElementById('onHoldTasks').textContent = response.data.onHoldTask ? response.data.onHoldTask : "0";
                    document.getElementById('overdueTasks').textContent = response.data.overdueTask ? response.data.overdueTask : "0";
                },
                error: function (xhr, status, error) {
                    console.error('Error fetching task statistics:', error);
                    // Reset to 0 on error
                    statElements.forEach(id => {
                        document.getElementById(id).textContent = '0';
                    });
                }
            });
        }

        // Initialize with current week data when page loads
        document.addEventListener('DOMContentLoaded', function () {
            updateTasksOverview();
            updateTasksList();
            updateProgressChart();
        });
    </script>
}

<script>
    // Updated sample task data with subtasks
    function updateTasksList() {
        const selectedFilter = document.getElementById('taskFilterSelect').value;
        const taskList = document.getElementById('taskList');
        const noTasksMessage = document.getElementById('noTasksMessage');

        // Show loading state
        taskList.innerHTML = '<div class="loading">Loading tasks...</div>';

        $.ajax({
            url: '/Home/GetTasks',
            type: 'GET',
            data: { type: selectedFilter },
            success: function (response) {
                if (response.success) {
                    taskList.innerHTML = '';
                    taskList.style.display = 'flex';
                    noTasksMessage.style.display = 'none';
                    response.data.tasks.forEach(task => {
                        const taskCard = createTaskCardItem(task);
                        taskList.insertAdjacentHTML('beforeend', taskCard);
                    });
                } else {
                    taskList.style.display = 'none';
                    noTasksMessage.style.display = 'flex';
                }
            },
            error: function (xhr, status, error) {
                console.error('Error fetching tasks:', error);
                taskList.innerHTML = '<div class="error">Error loading tasks. Please try again.</div>';
            }
        });
    }

    function createTaskCardItem(task) {
        let modelContent = `<div class="task-item" id="task-${task.id}" onclick="navigateToTaskDetails(${task.id})">
                                    <div class="task-main">
                                        <div class="task-status priority-${task.prioritycss}"></div>
                                        <div class="task-info">
                                            <h4>
                                                ${task.title}
                                                ${task.totalSubtasksCount > 0 ? `<span class="subtask-count">${task.totalSubtasksCount} subtasks</span>` : ''}
                                            </h4>
                                            <p>Due: ${task.dueDate}</p>
                                                ${task.totalSubtasksCount > 0 ? `
                                                <div class="task-progress">
                                                    <span>Progress:</span>
                                                    <div class="progress-bar-mini">
                                                        <div class="progress-fill" style="width: ${task.progress}%"></div>
                                                    </div>
                                                    <span>${task.progress}%</span>
                                                    <button class="expand-button" onclick="toggleSubtasks(${task.id}, event)">
                                                        <i class="fas fa-chevron-down"></i>
                                                    </button>
                                                </div>` 
                                                : ''}
                                        </div>
                                        <div class="task-priority status-${task.statuscss}" style="min-width: 100px; min-height: 45px;">
                                            <span style="font-size: 12px;">Status</span>
                                            <span style="font-style: italic; font-size: 14px;">${task.statusDisplay}</span>
                                        </div>
                                    </div>
                                    ${task.subtasks ? `
                                        <div class="task-subtasks" id="subtasks-${task.id}" style="display: none;">
                                            ${task.subtasks.map(subtask => `
                                                <div class="subtask-item" onclick="navigateToTaskDetails(${task.id})">
                                                    <div class="subtask-status status-${subtask.statuscss}"></div>
                                                        <div><span class="subtask-title">${subtask.title} </span> <br/>
                                                        <span class="subtask-due"> Due: ${subtask.dueDate}</span></div>
                                                    
                                                </div>
                                            `).join('')}
                                        </div>
                                    ` : ''}
                                </div>
                            `;

        return modelContent;
    }

    // Helper function to format dates
    function formatDate(dateString) {
        const date = new Date(dateString);
        return date.toLocaleDateString('en-US', {
            year: 'numeric',
            month: 'short',
            day: 'numeric',
            hour: '2-digit',
            minute: '2-digit'
        });
    }

    // Initialize when page loads

    // Update when filter changes
    document.getElementById('taskFilterSelect').addEventListener('change', updateTasksList);

    // Add navigation function
    function navigateToTaskDetails(taskId) {
        window.location.href = `/Task/CreateTask/${taskId}`;
    }

    // Update toggleSubtasks to prevent navigation when expanding/collapsing
    function toggleSubtasks(taskId, event) {
        event.stopPropagation(); // Prevent task click event
        const subtasksElement = document.getElementById(`subtasks-${taskId}`);
        const button = event.currentTarget;
        const icon = button.querySelector('i');

        if (subtasksElement.style.display === 'none') {
            subtasksElement.style.display = 'block';
            icon.classList.replace('fa-chevron-down', 'fa-chevron-up');
        } else {
            subtasksElement.style.display = 'none';
            icon.classList.replace('fa-chevron-up', 'fa-chevron-down');
        }
    }

</script>

<script>
    let progressChart = null;

    function updateProgressChart() {
        const selectedPeriod = document.getElementById('progressPeriodSelect').value;

        // Fetch data from controller
        $.ajax({
            url: '/Home/AjaxGetTaskCountTable',
            method: 'GET',
            data: { period: selectedPeriod },
            success: function (response) {
                if (response.success) {
                    const ctx = document.getElementById('progressChart').getContext('2d');

                    // Transform the response data into chart format
                    const chartData = {
                        labels: ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'],
                        datasets: [
                            {
                                label: 'Completed',
                                data: response.data.completeArray,
                                backgroundColor: '#28a745'
                            },
                            {
                                label: 'In Progress',
                                data: response.data.inProgressArray,
                                backgroundColor: '#007bff'
                            },
                            {
                                label: 'Not Started',
                                data: response.data.notStartedArray,
                                backgroundColor: '#6c757d'
                            },
                            {
                                label: 'On Hold',
                                data: response.data.onHoldArray,
                                backgroundColor: '#ffc107'
                            },
                            {
                                label: 'Overdue',
                                data: response.data.overdueArray,
                                backgroundColor: '#dc3545'
                            }
                        ]
                    };

                    if (progressChart) {
                        progressChart.destroy();
                    }

                    progressChart = new Chart(ctx, {
                        type: 'bar',
                        data: chartData,
                        options: {
                            responsive: true,
                            maintainAspectRatio: false,
                            scales: {
                                x: {
                                    stacked: true,
                                    grid: {
                                        display: false
                                    }
                                },
                                y: {
                                    stacked: true,
                                    beginAtZero: true,
                                    ticks: {
                                        stepSize: 1
                                    }
                                }
                            },
                            plugins: {
                                legend: {
                                    display: false
                                },
                                tooltip: {
                                    mode: 'index',
                                    intersect: false
                                }
                            },
                            interaction: {
                                mode: 'nearest',
                                intersect: false
                            }
                        }
                    });
                } else {
                    console.error('Failed to fetch chart data');
                }
            },
            error: function (xhr, status, error) {
                console.error('Error fetching chart data:', error);
            }
        });
    }

    // Update chart when period changes
    document.getElementById('progressPeriodSelect').addEventListener('change', updateProgressChart);
</script>

<script>
    function refreshForumPosts() {
        const forumList = document.getElementById('forumPostsList');
        forumList.innerHTML = '<div class="text-center py-3"><i class="fas fa-spinner fa-spin"></i> Loading...</div>';

        $.ajax({
            url: '/Home/GetRecentForumPosts',
            type: 'GET',
            success: function(response) {
                if (response.success && response.data && response.data.length > 0) {
                    forumList.innerHTML = '';
                    noTasksMessage.style.display = 'none';
                    response.data.forEach(post => {
                        const postCard = createPostCardItem(post);
                        forumList.insertAdjacentHTML('beforeend', postCard);

                        $(`#forum-${post.id}`).click(function (e) {
                            // Don't redirect if clicking on a link or button
                            if (!$(e.target).is('a, button, .btn')) {
                                window.location.href = `@Url.Action("Details", "Forum")/${post.id}`;
                            }
                        });
                    });
                    // Add the View All button after generating post cards
                    forumList.insertAdjacentHTML('beforeend', `
                        <div class="text-center mt-3">
                            <a href="/Forum/MyPost" class="btn btn-outline-primary btn-sm">View All Posts</a>
                        </div>
                    `);
                    // Add click handler for the entire card

                } else {
                    forumList.innerHTML = `
                        <div class="text-center py-3 text-muted">
                            <i class="fas fa-comments fa-2x mb-2"></i>
                            <p>No posts yet</p>
                        </div>
                    `;
                }
            },
            error: function() {
                forumList.innerHTML = `
                    <div class="text-center py-3 text-danger">
                        <i class="fas fa-exclamation-circle fa-2x mb-2"></i>
                        <p>Error loading posts</p>
                    </div>
                `;
            }
        });
    }

    function createPostCardItem(post) {
        let modelContent = `<div class="card mb-3 forum-card" id="forum-${post.id}">
                            <div class="card-body" style="padding: 1rem;">
                                <div class="row">
                                    <div class="col-md-12">
                                        <div class="d-flex align-items-start flex-column mb-2">
                                            <h5 class="card-title d-flex align-items-center gap-2">
                                                <span class="text-decoration-none text-dark fw-bold">
                                                    ${post.title}
                                                </span>
                                                ${renderNew(true)}
                                                        ${renderResolved(post.isResolved)}
                                            </h5>
                                        </div>
                                        <div class="description-container">
                                            <div class="description-container-transparent mb-1">
                                                <p class="text-muted description-text">${post.description}</p>
                                            </div>
                                            <div class="tags-container" style="font-style: italic;">
                                                Posted at ${post.createdDate}
                                            </div>
                                        </div>
                                        <div class="d-flex align-items-center mt-2">
                                            <span class="badge rounded-pill interaction bg-light text-dark">
                                                <i class="fas fa-heart"></i>${post.likeCount}
                                            </span>
                                            <span class="badge rounded-pill interaction bg-light text-dark me-2">
                                                <i class="fas fa-comments"></i> ${post.commentCount}
                                            </span>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>`;

        return modelContent;
    }

    function renderNew(isNew) {
        if (isNew) {
            return `<span class="badge rounded-pill bg-primary">New</span>`;
        } else {
            return ``;
        }

    }
            function renderResolved(isResolved) {
            if (isResolved) {
                return `<span class="status-resolved">Resolved</span>`;
            } else {
                return ``;
            }

        }


    // Initialize when page loads
    document.addEventListener('DOMContentLoaded', function() {
        refreshForumPosts();
    });
</script>