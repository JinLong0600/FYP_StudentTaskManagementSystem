@model StudentTaskManagement.ViewModels.L1NotificationPresetsViewModel;
@using  static StudentTaskManagement.Utilities.GeneralEnum;

@{
    ViewData["Title"] = "Notification Settings";
}
@{
    string TruncateDescription(string description, int wordCount = 20)
    {
        if (string.IsNullOrEmpty(description)) return description;

        var words = description.Split(' ');
        if (words.Length <= wordCount) return description;

        return string.Join(" ", words.Take(wordCount)) + "...";
    }
}

<!-- Page Title Section with Add Button -->
<div class="main-content child-content p-4">
    <div class="d-flex justify-content-between align-items-center">
        <div>
            <h2 class="mb-2"><i class="fa-solid fa-bell me-2"></i> My Notification Presets</h2>
            <p class="text-muted">Create and manage your notification templates to save time</p>
        </div>
        <button class="btn btn-create" id="createPresetBtn">
            <i class="fas fa-plus me-2"></i>Create New Preset
        </button>
    </div>

    <hr />

    <!-- Simplified Search and Filter -->
    <div class="filter-section mb-4">
        <div class="row g-3">
            <div class="col-md-4">
                <label class="form-label fw-semibold">Search</label>
                <div class="search-box">
                    <input type="text" id="customSearch" class="form-control" placeholder="Search your presets...">
                </div>
            </div>

            <div class="col-md-4">
                <label for="Type" class="form-label fw-semibold">Notification Preset Type</label>
                <div class="custom-dropdown">
                    <select class="form-select" id="Type" name="Type">
                        <option value="">- All Types -</option>
                        <option value="@((int)NotificationPresetType.Days)">Days-Based</option>
                        <option value="@((int)NotificationPresetType.Mintues)">Minutes-Based</option>
                    </select>
                </div>
            </div>
            <div class="col-md-2">
                <div class="d-flex flex-column justify-content-end h-100" style="padding-bottom: 0.3rem;">
                    <button class="btn btn-outline-secondary w-100" style="padding: 8px 16px;" id="clearButton">
                        <i class="fas fa-times me-1"></i>Clear Filter
                    </button>
                </div>
            </div>

            <div class="col-2">
                <div class="d-flex flex-column justify-content-end h-100" style="padding-bottom: 0.3rem;">
                    <button class="btn btn-primary w-100" id="searchButton">
                        <i class="fas fa-filter me-2"></i>Apply Filters
                    </button>
                </div>
            </div>

        </div>
    </div>

    <!-- Preset Cards Grid -->
    <div id="parentPresetGrid">
        <div class="preset-grid" id="presetGrid">
        </div>
    </div>

    <!-- Add this after the preset-grid div -->
    <div class="pagination-container mt-4">
        <nav aria-label="Notification preset pages">
            <ul class="pagination justify-content-center">
            </ul>
        </nav>
    </div>

    <!-- Add this modal markup at the bottom of your main content div -->
    <div class="modal fade" id="presetModal" tabindex="-1" aria-labelledby="presetModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered modal-lg">
            <div class="modal-content notification-modal-content">
                <div class="modal-header notification-modal-header">
                    <h5 class="modal-title title-white" id="presetModalLabel">
                        <i class="fas fa-bell me-2"></i>
                        <span class="modal-title-text"></span>
                    </h5>
                </div>
                <form asp-action="AjaxCreate" asp-controller="NotificationPreset" method="post">
                    <div class="modal-body notification-modal-body p-4">
                            <input type="hidden" id="presetId" name="id" value="" />
                            <div class="row g-4">
                                <!-- Basic Information -->
                                <div class="col-12">
                                    <div class="section-title mb-3">Basic Information</div>
                                    <div class="row g-4">
                                        <div class="col-md-12">
                                        <label for="presetName" class="form-label lb-required">Preset Name</label>
                                        <input type="text" class="form-control" id="presetName" name="Name" placeholder="Enter preset name" value="" maxlength="50">
                                        </div>
                                        <div class="col-12">
                                            <label for="presetDescription" class="form-label">Description</label>
                                            <textarea class="form-control" id="presetDescription" name="Description"
                                                  rows="3" placeholder="Enter a brief description" value=""></textarea>
                                        </div>
                                        <div class="col-md-12">
                                            <label class="form-label">Reminder Type</label>
                                            <div class="notification-type-container">
                                            <input type="radio" id="type1" name="type" value="@((int)NotificationPresetType.Days)">
                                                <label for="type1">Day</label>
                                            <input type="radio" id="type2" name="type" value="@((int)NotificationPresetType.Mintues)">
                                                <label for="type2">Minute</label>
                                            </div>
                                        </div>
                                    </div>
                                </div>

                                <!-- Reminder Settings -->
                                <div class="col-12">
                                    <div class="section-title mb-3">Reminder Settings</div>
                                    <div class="row g-4">
                                        <div class="col-md-6 days-before-section">
                                            <label for="reminderDaysBefore" class="form-label lb-required">Days Before</label>
                                            <div class="input-group">
                                                <input type="number" class="form-control" id="reminderDaysBefore" 
                                                       name="ReminderDaysBefore" min="1" maxlength="2">
                                                <span class="input-group-text">days</span>
                                            </div>
                                        </div>
                                        <div class="col-md-12 minutes-before-section">
                                            <label class="form-label lb-required">Minutes Before</label>
                                            <div class="row">
                                                <div class="col-md-6">
                                                    <div class="input-group">
                                                        <input type="number" class="form-control" id="reminderHoursBefore"
                                                               name="ReminderHoursBefore" min="0" max="23" maxlength="2">
                                                        <span class="input-group-text">hours</span>
                                                    </div>
                                                </div>
                                                <div class="col-md-6">
                                                    <div class="input-group">
                                                        <input type="number" class="form-control" id="reminderMinutesBefore"
                                                               name="ReminderMinutesBefore" min="0" max="59" maxlength="2">
                                                        <span class="input-group-text">minutes</span>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="col-md-6 reminder-time-section">
                                        <label for="reminderTime" class="form-label lb-required">Reminder Time</label>
                                            <input type="time" class="form-control" id="reminderTime" name="ReminderTime">
                                        </div>
                                    </div>
                                </div>

                                <!-- Additional Options -->
                                <div class="col-12 additional-options-section">
                                    <div class="section-title mb-3">Additional Options</div>
                                    <div class="row g-4">
                                        <div class="col-md-6">
                                            <div class="form-check form-switch">
                                                <input class="form-check-input" type="checkbox" id="isDaily" name="IsDaily" value="true">
                                                <label class="form-check-label" for="isDaily">Daily Reminder</label>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                    </div>
                    <div class="modal-footer d-flex justify-content-between p-4">
                        <button type="button" class="btn btn-outline-secondary" data-bs-dismiss="modal">Cancel</button>
                        <button type="submit" class="btn btn-primary">Save Changes</button>
                    </div>
                </form>

            </div>
        </div>
    </div>

    <!-- Add this modal markup at the bottom of your main content div, next to the existing presetModal -->
    <div class="modal fade" id="activeTasksModal" tabindex="-1" aria-labelledby="activeTasksModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered modal-lg">
            <div class="modal-content notification-modal-content">
                <div class="modal-header notification-modal-header">
                    <h5 class="modal-title" id="activeTasksModalLabel">Tasks Using This Preset</h5>
                    <button type="button" class="btn-secondary" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body notification-modal-body">
                    <div class="task-list">
                        <!-- Task items will be dynamically inserted here -->
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                </div>
            </div>
        </div>
    </div>
</div>

<style>
    :root {
        --primary--color: #6c63ff;
        --secondary-color: #3f3d56;
        --background-light: #f8fafc;
        --card-shadow: 10px 10px 10px rgba(0, 0, 0, 0.5);
    }
    /* Add this CSS for task description container */
    .notification-description {
        min-height: 65px; /* Fixed height for description area */
        margin: 0.8rem 0 1rem 0; /* Add margin top and bottom */
        padding: 0 0.5rem; /* Add some padding on sides */
    }

    /* Search and Filter */
    .search-icon {
        position: absolute;
        left: 15px;
        top: 50%;
        transform: translateY(-50%);
        color: #94a3b8;
    }

    /* Timing Pills Display in Cards */
    .timing-pills-display {
        display: flex;
        flex-wrap: wrap;
        gap: 0.5rem;
        margin: 0.75rem;
    }

    .timing-pill {
        display: inline-flex;
        align-items: center;
        padding: 0.5rem 1rem;
        background-color: #f1f5f9;
        border-radius: 20px;
        font-size: 0.85rem;
        color: var(--secondary-color);
        transition: all 0.3s ease;
    }

    .timing-pill i {
        color: var(--accent-blue);
        margin-right: 0.5rem;
    }

    .usage-pills {
        display: flex;
        gap: 0.75rem;
        margin: 0.5rem;
    }

    .usage-pill {
        display: inline-flex;
        align-items: center;
        padding: 6px 14px;
        border-radius: 20px;
        font-size: 0.85rem;
        color: #64748b;
    }

    .usage-pill i:not(.pill-arrow) {
        margin-right: 0.5rem;
        font-size: 0.75rem;
        color: var(--primary-color);
    }

    .usage-label {
        font-style: italic;
        color: #64748b;
        font-size: 0.85rem;
    }

    .usage-pill.clickable {
        cursor: pointer;
        padding-right: 16px;
        background-color: #f0f4ff;
        border: 1px solid #e0e7ff;
        transition: all 0.2s ease;
        position: relative;
    }

    .usage-pill.clickable:hover {
        background-color: #e0e7ff;
        transform: translateY(-1px);
        box-shadow: 0 2px 4px rgba(0,0,0,0.05);
    }

    .usage-pill.clickable:active {
        transform: translateY(0);
    }

    .pill-arrow {
        font-size: 0.7rem;
        margin-left: 6px;
        color: var(--primary-color);
        opacity: 0.7;
    }

    .usage-pill.clickable:hover .pill-arrow {
        opacity: 1;
        transform: translateX(2px);
        transition: all 0.2s ease;
    }

    .usage-pill.non-interactive {
        background-color: #f8fafc;
        cursor: default;
    }

    /* Active Tasks Modal Styles */
    .task-list {
        display: flex;
        flex-direction: column;
        gap: 0.75rem;
    }

    .task-item {
        display: flex;
        align-items: flex-start;
        padding: 1.25rem;
        background-color: #f8fafc;
        border-radius: 12px;
        transition: all 0.2s ease;
        gap: 1rem;
        cursor: pointer;
        border: 1px solid transparent;
    }

    .task-item:hover {
        background-color: #f1f5f9;
        border-color: #e2e8f0;
        transform: translateY(-1px);
        box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 
                    0 2px 4px -1px rgba(0, 0, 0, 0.06);
    }

    .task-item:active {
        transform: translateY(0);
        box-shadow: none;
    }

    /* Add focus styles for accessibility */
    .task-item:focus {
        outline: none;
        border-color: var(--primary-color);
        box-shadow: 0 0 0 3px rgba(99, 102, 241, 0.1);
    }

    .task-icon {
        width: 40px;
        height: 40px;
        display: flex;
        align-items: center;
        justify-content: center;
        background: white;
        border-radius: 10px;
        margin-right: 1rem;
        color: var(--primary-color);
    }

    .task-details {
        flex: 1;
        margin-right: 1rem;
    }

    /* Update task title style */
    .task-title {
        font-size: 1.1rem;
        font-weight: 500;
        color: var(--secondary-color);
        margin-bottom: 0.25rem;
    }

    .task-status {
        padding: 4px 12px;
        border-radius: 20px;
        font-size: 0.75rem;
        font-weight: 500;
    }

    .status-ongoing {
        background-color: #e0f2fe;
        color: #0369a1;
    }

    .status-completed {
        background-color: #dcfce7;
        color: #15803d;
    }

    .task-indicators {
        display: flex;
        flex-direction: column;
        gap: 0.75rem;
        min-width: 200px;
    }

    .indicator-group {
        display: flex;
        align-items: center;
        justify-content: flex-end;
        gap: 0.5rem;
    }

    .indicator-label {
        font-size: 0.85rem;
        color: #64748b;
        white-space: nowrap;
    }

    .task-priority, .task-status {
        padding: 4px 12px;
        border-radius: 20px;
        font-size: 0.75rem;
        font-weight: 500;
        display: inline-flex;
        align-items: center;
        gap: 0.5rem;
        min-width: 100px;
        justify-content: center;
    }

    .priority-urgent {
        background-color: #fee2e2;
        color: #dc2626;
    }

    .priority-high {
        background-color: #fff7ed;
        color: #ea580c;
    }

    .priority-medium {
        background-color: #fef9c3;
        color: #854d0e;
    }

    .priority-low {
        background-color: #f0fdf4;
        color: #166534;
    }

    .status-ongoing {
        background-color: #e0f2fe;
        color: #0369a1;
    }

    .status-completed {
        background-color: #dcfce7;
        color: #15803d;
    }

    .task-header.notification-task-header {
        margin-bottom: 0.5rem;
        margin-top: 0rem; /* Space for priority badge */
    }

    .task-type {
        padding: 4px 12px;
        border-radius: 20px;
        font-size: 0.75rem;
        font-weight: 500;
        white-space: nowrap;
    }

    .type-assignment {
        background-color: #ede9fe;
        color: #6d28d9;
    }

    .type-meeting {
        background-color: #fae8ff;
        color: #a21caf;
    }

    .type-exam {
        background-color: #fee2e2;
        color: #dc2626;
    }

    .type-custom {
        background-color: #e0f2fe;
        color: #0369a1;
    }

    .subtask-pill {
        padding: 4px 12px;
        border-radius: 20px;
        font-size: 0.75rem;
        font-weight: 500;
        background-color: #e0f2fe;
        color: #0369a1;
        display: inline-flex;
        align-items: center;
        gap: 0.5rem;
        white-space: nowrap;
        transition: all 0.2s ease;
        display: inline-flex;
    }

    /* Optional: if you want to ensure pills are always aligned */
    .task-type, .subtask-pill {
        margin-top: 2px;
        margin-bottom: 2px;
    }

    /* Completed - All subtasks done */
    .subtask-completed {
        background-color: #dcfce7;
        color: #15803d;
    }

    .subtask-completed i {
        color: #16a34a;
    }

    /* In Progress - Some subtasks completed */
    .subtask-in-progress {
        background-color: #fef9c3;
        color: #854d0e;
    }

    .subtask-in-progress i {
        color: #ca8a04;
    }

    /* Not Started - No subtasks completed */
    .subtask-not-started {
        background-color: #e0f2fe;
        color: #0369a1;
    }

    .subtask-not-started i {
        color: #0284c7;
    }

    /* Optional: Style for tasks with no subtasks */
    .subtask-no-subtasks {
        background-color: #f1f5f9;
        color: #64748b;
    }

    .subtask-no-subtasks i {
        color: #94a3b8;
    }

    /* Optional: Add a subtle progress indicator */
    .subtask-in-progress::after {
        position: absolute;
        width: 100%;
        height: 2px;
        background: linear-gradient(to right, #ca8a04 var(--progress), transparent 0);
        border-radius: 0 0 20px 20px;
    }

    .form-check-label {
        font-weight: 500;
    }

    .form-check-input {
        width: 3rem !important;
        height: 1.5rem;
        margin-right: 0.5rem;
    }

    .input-group-text {
        background-color: #f8fafc;
        border-color: #e2e8f0;
        color: #64748b;
    }

    /* Radio button container */

    /* Hide the default radio button */
    .notification-type-container input[type="radio"] {
        position: absolute;
        opacity: 0;
    }

    /* Custom radio button style */
    .notification-type-container input[type="radio"] + label {
        position: relative;
        padding-left: 28px;
        cursor: pointer;
        line-height: 20px;
        display: inline-block;
        margin-right: 20px;
        color: #666;
    }

    /* The custom radio circle */
    .notification-type-container input[type="radio"] + label:before {
        content: '';
        position: absolute;
        left: 0;
        top: 0;
        width: 20px;
        height: 20px;
        border: 2px solid #ccc;
        border-radius: 100%;
        background: white;
    }

    /* The dot inside when selected */
    .notification-type-container input[type="radio"]:checked + label:after {
        content: '';
        position: absolute;
        left: 5px;
        top: 5px;
        width: 10px;
        height: 10px;
        border-radius: 100%;
        background: #0078D4;
    }

    /* Hover state */
    .notification-type-container input[type="radio"] + label:hover:before {
        border-color: #0078D4;
    }

    /* Focus state for accessibility */
    .notification-type-container input[type="radio"]:focus + label:before {
        box-shadow: 0 0 0 3px rgba(0, 120, 212, 0.2);
    }

</style>

@section Scripts {
    <script>
        // ===============================================
        // Modal Handling (Create/Edit Preset)
        // ===============================================
        function setupModal(isCreate) {
            const modal = document.getElementById('presetModal');
            const modalTitle = modal.querySelector('.modal-title-text');
            const form = modal.querySelector('form');
            
            modalTitle.textContent = isCreate ? 'Create Notification Preset' : 'Edit Notification Preset';     
            setupFormValidation();
            if (isCreate) {
                form.reset();
                document.querySelector('input[name="type"][value="@((int)NotificationPresetType.Days)"]').checked = true;
                form.setAttribute('action', '/NotificationPreset/AjaxCreate');
            } else {
                form.setAttribute('action', '/NotificationPreset/AjaxEdit');
            }
            setupRadioButtonControls();
            const modalInstance = new bootstrap.Modal(modal);
            modalInstance.show();

        }

        // ===============================================
        // AJAX Form Submission
        // ===============================================
        function setupAjaxForm() {
            const form = document.querySelector('#presetModal form');
            
            form.addEventListener('submit', function(e) {
                e.preventDefault();
                
                const formData = new FormData(form);
                const data = Object.fromEntries(formData.entries());
                console.log(data);
                const submitBtn = form.querySelector('button[type="submit"]');
                const originalText = submitBtn.innerHTML;
                submitBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Saving...';
                submitBtn.disabled = true;

                $.ajax({
                    url: form.getAttribute('action'),
                    type: 'POST',
                    data: data,
                    success: function(response) {
                        if (response.success) {
                            bootstrap.Modal.getInstance(document.getElementById('presetModal')).hide();
                            Swal.fire({
                                title: 'Success!',
                                text: 'Notification preset has been created successfully.',
                                icon: 'success',
                                confirmButtonText: 'OK'
                            }).then(() => {
                                window.location.reload();
                            });
                        } else {
                            Swal.fire({
                                title: 'Error!',
                                text: response.message || 'Something went wrong.',
                                icon: 'error',
                                confirmButtonText: 'OK'
                            });
                        }
                    },
                    error: function(xhr, status, error) {
                        Swal.fire({
                            title: 'Error!',
                            text: 'Failed to create notification preset. Please try again.',
                            icon: 'error',
                            confirmButtonText: 'OK'
                        });
                    },
                    complete: function() {
                        submitBtn.innerHTML = originalText;
                        submitBtn.disabled = false;
                    }
                });
            });
        }

        // ===============================================
        // Radio Button Visibility Control
        // ===============================================
        function setupRadioButtonControls() {
            const dayRadio = document.querySelector('input[name="type"][value="@((int)NotificationPresetType.Days)"]');
            const minuteRadio = document.querySelector('input[name="type"][value="@((int)NotificationPresetType.Mintues)"]');
            
            const daysBeforeSection = document.querySelector('.days-before-section');
            const minutesBeforeSection = document.querySelector('.minutes-before-section');
            const reminderTimeSection = document.querySelector('.reminder-time-section');
            const additionalOptionsSection = document.querySelector('.additional-options-section');

            function updateVisibility(isDayType) {
                daysBeforeSection.style.display = isDayType ? 'block' : 'none';
                reminderTimeSection.style.display = isDayType ? 'block' : 'none';
                minutesBeforeSection.style.display = isDayType ? 'none' : 'block';
                additionalOptionsSection.style.display = isDayType ? 'none' : 'block';
            }

            dayRadio.addEventListener('change', () => updateVisibility(true));
            minuteRadio.addEventListener('change', () => updateVisibility(false));
            updateVisibility(dayRadio.checked);
        }

        // ===============================================
        // Active Tasks Modal
        // ===============================================
        function showActiveTasks(presetId) {
            const tasks = [
                {
                    id: 1,
                    title: "Complete Project Presentation",
                    dueDate: "2024-02-20",
                    status: "ongoing",
                    type: "Assignment",
                    priority: "high",
                    subtasks: {
                        total: 3,
                        completed: 1
                    }
                },
                {
                    id: 2,
                    title: "Weekly Team Meeting",
                    dueDate: "2024-02-22",
                    status: "completed",
                    type: "Meeting",
                    priority: "medium",
                    subtasks: {
                        total: 5,
                        completed: 5
                    }
                },
                {
                    id: 3,
                    title: "Final Exam Preparation",
                    dueDate: "2024-02-25",
                    status: "ongoing",
                    type: "Exam",
                    priority: "urgent",
                    subtasks: {
                        total: 4,
                        completed: 2
                    }
                }
            ];

            const taskList = document.querySelector('#activeTasksModal .task-list');
            taskList.innerHTML = '';

            tasks.forEach(task => {
                const subtaskStatus = getSubtaskStatus(task.subtasks);
                const dueDateStatus = getDueDateStatus(task.dueDate);
                
                const taskElement = createTaskElement(task, subtaskStatus, dueDateStatus);
                taskList.insertAdjacentHTML('beforeend', taskElement);
            });

            const modal = new bootstrap.Modal(document.getElementById('activeTasksModal'));
            modal.show();
        }

        // ===============================================
        // Helper Functions
        // ===============================================
        function getSubtaskStatus(subtasks) {
            if (!subtasks.total) return 'no-subtasks';
            if (subtasks.completed === subtasks.total) return 'completed';
            return subtasks.completed > 0 ? 'in-progress' : 'not-started';
        }

        function getDueDateStatus(dueDate) {
            const today = new Date();
            const due = new Date(dueDate);
            return due.toDateString() === today.toDateString() ? 'due-today' : 'normal';
        }

        function createTaskElement(task, subtaskStatus, dueDateStatus) {
            // Your task element HTML template...
            return `...`;
        }

        function navigateToTask(taskId) {
            window.location.href = `/Task/Details/${taskId}`;
        }

        function formatDate(dateString) {
            const options = { month: 'short', day: 'numeric', year: 'numeric' };
            return new Date(dateString).toLocaleDateString('en-US', options);
        }

        //
        //
        //
        function loadPresets(page = 1, searchTerm = '', type = '') {
            
            const parentPresetGrid = document.getElementById('parentPresetGrid');
            parentPresetGrid.innerHTML = '<div class="text-center"><i class="fas fa-spinner fa-spin fa-2x"></i></div>';

            $.ajax({
                url: '/NotificationPreset/GetPresets',
                type: 'GET',
                data: {
                    page: page,
                    searchTerm: searchTerm,
                    type: type
                },
                success: function(response) {
                    parentPresetGrid.innerHTML = '<div class="preset-grid" id="presetGrid"></div >';
                    const presetGrid = document.getElementById('presetGrid');
                    if (response.success) {
                        presetGrid.innerHTML = '';
                        response.data.presets.forEach(preset => {
                            const presetCard = createPresetCard(preset);
                            presetGrid.insertAdjacentHTML('beforeend', presetCard);
                        });

                        // Update pagination
                        updatePagination(response.data.currentPage, response.data.totalPages);
                    } else {
                        // Update pagination
                        parentPresetGrid.innerHTML = `
                            <div class="alert alert-info text-center">
                                <i class="fas fa-info-circle me-2"></i>
                                No notification presets found
                            </div>`;
                        updatePagination(0, 0);
                    }
                },
                error: function() {
                    parentPresetGrid.innerHTML = `
                        <div class="alert alert-danger text-center">
                            <i class="fas fa-exclamation-circle me-2"></i>
                            Failed to load presets. Please try again.
                        </div>`;
                }
            });
        }

        function createPresetCard(preset) {
            return `
                <div class="preset-card notification-preset-card">
                    <div class="preset-header">
                        <span class="preset-type">${preset.type}</span>
                        <div class="preset-actions">
                            <button class="btn-icon edit-btn" 
                                    onclick="editSetting(${preset.id})" 
                                    data-tooltip="Edit preset">
                                <i class="fas fa-edit"></i>
                            </button>
                            <button class="btn-icon delete-btn" 
                                    onclick="deleteSetting(${preset.id})" 
                                    data-tooltip="Delete preset">
                                <i class="fas fa-trash"></i>
                            </button>
                        </div>
                    </div>
                    <h4 class="preset-title">${preset.name}</h4>
                    <div class="notification-description mb-4">
                        <p class="preset-description">${renderDescription(preset.description)}</p>
                    </div>
                    <div class="preset-details">
                        <div class="timing-pills-display">
                            ${createTimingPills(preset)}
                        </div>
                    </div>


                </div>
            `;
            /*        <div class="preset-footer">
                        ${createTaskSubTaskPills(preset)}
                    </div>
            */          
        }

        function createTimingPills(preset) {
            const pills = [];

            if (preset.reminderDaysBefore) {
                pills.push(`
                    <span class="timing-pill">
                        <i class="fas fa-calendar-day"></i>${preset.reminderDaysBefore} day(s) before, at ${preset.reminderTime}
                    </span>
                `);
            }

            if (preset.reminderHoursBefore && preset.reminderMinutesBefore) {
                pills.push(`
                    <span class="timing-pill">
                        <i class="fas fa-clock"></i>${preset.reminderHoursBefore} hour(s) ${preset.reminderMinutesBefore} minute(s) before
                    </span>
                `);
            }else if(preset.reminderHoursBefore)
            {
                pills.push(`
                    <span class="timing-pill">
                        <i class="fas fa-clock"></i>${preset.reminderHoursBefore} hour(s) before
                    </span>
                `);
            }
            else if(preset.reminderMinutesBefore)
            {
                pills.push(`
                    <span class="timing-pill">
                        <i class="fas fa-clock"></i>${preset.reminderMinutesBefore} minute(s) before
                    </span>
                `);
            }
            
            if (preset.isDaily) {
                pills.push(`
                    <span class="timing-pill">
                        <i class="fas fa-redo"></i> Daily
                    </span>
                `);
            }
            
            return pills.join('');
        }

        function createTaskSubTaskPills(preset) {
            const pills = [];
            if (preset.activeTasksCount == 0 && preset.subItemsCount == 0) {
                pills.push(
                    `<div class="preset-usage">
                        <span class="usage-label">Currently in use by:</span>
                        <div class="usage-pills">
                            <span class="usage-pill empty-usage-pill">
                                <span>No task or subtask is applying this preset.</span>
                            </span>
                        </div>
                    </div>`);
            }
            else {
                pills.push(
                    `<div class="preset-usage">
                        <span class="usage-label">Currently in use by:</span>
                        <div class="usage-pills">
                            <span class="usage-pill clickable" onclick="showActiveTasks(${preset.id})">
                                <i class="fas fa-tasks"></i>
                                <span>${preset.activeTasksCount} active tasks</span>
                                <i class="fas fa-chevron-right pill-arrow"></i>
                            </span>
                            <span class="usage-pill non-interactive">
                                <i class="fas fa-list"></i>
                                <span>${preset.subItemsCount} sub-items</span>
                            </span>
                        </div>
                    </div>`);
            }

            return pills.join('');
        }

        function updatePagination(currentPage, totalPages) {
            const pagination = document.querySelector('.pagination');
            let paginationHtml = '';
            if (totalPages >= 1) 
            {
                // Previous button
                paginationHtml += `
                    <li class="page-item ${currentPage === 1 ? 'disabled' : ''}">
                        <a class="page-link" href="#" onclick="loadPresets(${currentPage - 1})" tabindex="-1">
                            <i class="fas fa-chevron-left"></i>
                        </a>
                    </li>
                `;
            
                // Page numbers
                for (let i = 1; i <= totalPages; i++) {
                    paginationHtml += `
                        <li class="page-item ${i === currentPage ? 'active' : ''}">
                            <a class="page-link" href="#" onclick="loadPresets(${i})">${i}</a>
                        </li>
                    `;
                }
            
                // Next button
                paginationHtml += `
                    <li class="page-item ${currentPage === totalPages ? 'disabled' : ''}">
                        <a class="page-link" href="#" onclick="loadPresets(${currentPage + 1})">
                            <i class="fas fa-chevron-right"></i>
                        </a>
                    </li>
                `;
            }
            pagination.innerHTML = paginationHtml;
        }

        function renderDescription(description) {
            if (description == null || description == "") {
                return `<span style="font-size: 0.75rem; font-style: italic; color:#878787;">- No description provided -</span>`;
            } else {
                return description;
            }
        }

        // ===============================================
        // Initialize Everything
        // ===============================================
        document.addEventListener('DOMContentLoaded', function() {
            // Setup event listeners for create/edit buttons
            const editButtons = document.querySelectorAll('.btn-icon .fa-edit');
            const createButton = document.querySelector('#createPresetBtn');
            
            editButtons.forEach(button => {
                button.parentElement.addEventListener('click', function(e) {
                    e.stopPropagation();
                    const card = this.closest('.preset-card');
                    const presetData = {
                        name: card.querySelector('.preset-title').textContent,
                        description: card.querySelector('.preset-description').textContent,
                        type: card.querySelector('.preset-type').textContent.trim()
                    };
                    setupModal(false, presetData);  
                });
            });

            createButton.addEventListener('click', () => setupModal(true));

            // Setup radio button controls
            setupRadioButtonControls();
            // Initial load of presets
            loadPresets();

            const searchInput = document.getElementById('customSearch');
            const typeSelect = document.getElementById('Type');
            
            // Search button handler
            document.getElementById('searchButton').addEventListener('click', function() {
                loadPresets(1, searchInput.value, typeSelect.value);
            });

            // Clear filter handler
            document.getElementById('clearButton').addEventListener('click', function() {
                searchInput.value = '';
                typeSelect.value = ''; // or your default value, e.g., 'All'
                loadPresets(1, '', ''); // Reset to initial state
            });

        });

        // Add this in your Scripts section, after the existing code
        function setupFormValidation(isEdit = false) {
            const form = document.querySelector('#presetModal form');
            
            const validator = $(form).validate({
                rules: {
                    Name: {
                        required: true,
                    },
                    ReminderDaysBefore: {
                        digits: true,
                        required: true,
                    },
                    ReminderHoursBefore: {
                        digits: true,
                        required: function(element) {
                            return $("#reminderMinutesBefore").val() === "" || $("#reminderMinutesBefore").val() === "0";
                        }
                    },
                    ReminderMinutesBefore: {
                        digits: true,
                        required: function(element) {
                            return $("#reminderHoursBefore").val() === "" || $("#reminderHoursBefore").val() === "0";
                        }
                    },
                    ReminderTime: {
                        required: true,
                    },
                },
                messages: {
                    ReminderHoursBefore: {
                        required: "Please enter either hours or minutes before",
                    },
                    ReminderMinutesBefore: {
                        required: "Please enter either hours or minutes before",
                    }
                },
                errorElement: 'span',
                errorClass: 'text-danger',
                errorPlacement: function(error, element) {
                    //error.insertAfter(element);
                    if (element.closest('.input-group').length > 0) {
                        error.insertAfter(element.parent('.input-group'));
                        error.fadeIn('fast');
                    }
                    else {
                        error.hide();
                        error.insertAfter(element);
                        error.fadeIn('fast');
                    }
                },
                highlight: function(element) {
                    $(element).addClass('is-invalid').removeClass('is-valid');
                },
                unhighlight: function(element) {
                    $(element).addClass('is-valid').removeClass('is-invalid');
                },
                submitHandler: function(form) {
                    // This will handle the AJAX submission
                    const formData = new FormData(form);
                    const data = Object.fromEntries(formData.entries());
                    
                    const submitBtn = form.querySelector('button[type="submit"]');
                    const originalText = submitBtn.innerHTML;
                    submitBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Saving...';
                    submitBtn.disabled = true;

                    const isEdit = document.getElementById('presetId').value !== '';
                    const url = isEdit ? '/NotificationPreset/AjaxEdit' : '/NotificationPreset/AjaxCreate';

                    $.ajax({
                        url: url,
                        type: 'POST',
                        data: data,
                        success: function(response) {
                            if (response.success) {
                                bootstrap.Modal.getInstance(document.getElementById('presetModal')).hide();
                                Swal.fire({
                                    title: 'Success!',
                                    text: response.message,
                                    icon: 'success',
                                    confirmButtonText: 'OK'
                                }).then(() => {
                                    //window.location.reload();
                                    loadPresets();
                                });
                            } else {
                                Swal.fire({
                                    title: 'Error!',
                                    text: response.message,
                                    icon: 'error',
                                    confirmButtonText: 'OK'
                                });
                            }
                        },
                        error: function(xhr, status, error) {
                            Swal.fire({
                                title: 'Error!',
                                text: 'Failed to create notification preset. Please try again.',
                                icon: 'error',
                                confirmButtonText: 'OK'
                            });
                        },
                        complete: function() {
                            submitBtn.innerHTML = originalText;
                            submitBtn.disabled = false;
                        }
                    });
                }
            });

            //validator.resetForm();
            //// Remove validation styling classes
            //$('.is-invalid').removeClass('is-invalid');
            //$('.is-valid').removeClass('is-valid');
            // Reset the form
            //form.reset();

            // Only clear form and validation states when creating new preset
            if (!isEdit) {
                validator.resetForm();        // Clears validation states
                $('.is-invalid').removeClass('is-invalid');  // Removes error styling
                $('.is-valid').removeClass('is-valid');      // Removes success styling
                form.reset();                // Clears form values
            }

            return validator;  // Optionally return validator if needed elsewhere
        }

        function editSetting(presetId) {
        // Show loading state in modal
        const modal = document.getElementById('presetModal');
        const modalBody = modal.querySelector('.modal-body');
        const originalContent = modalBody.innerHTML;
        modalBody.innerHTML = '<div class="text-center py-5"><i class="fas fa-spinner fa-spin fa-2x"></i></div>';

        // Show modal while loading
        const modalInstance = new bootstrap.Modal(modal);
        modalInstance.show();

            // Fetch preset details using AJAX
            $.ajax({
                url: '/NotificationPreset/AjaxGetPresetDetails',
                type: 'GET',
                data: { id: presetId },
                success: function(response) {
                    if (response.success) {
                        const preset = response.data;
                        
                        // Reset modal content
                        modalBody.innerHTML = originalContent;
                        
                        // Update modal title
                        document.querySelector('.modal-title-text').textContent = 'Edit Notification Preset';
                        
                        // Update form action and method
                        const form = modal.querySelector('form');
                        form.setAttribute('action', '/NotificationPreset/AjaxEdit');


                        // Populate form fields
                        $('#presetId').val(preset.id);
                        $('#presetName').val(preset.name);
                        $('#presetDescription').val(preset.description);
                        // Set reminder type radio
                        const typeRadio = document.querySelector(`input[name="type"][value="${preset.type}"]`);
                        typeRadio.checked = true;
                        typeRadio.dispatchEvent(new Event('change'));

                        // Set reminder values based on type

                        if (preset.type == '@((int)NotificationPresetType.Days)') {
                            $('#reminderDaysBefore').val(preset.daysBefore);
                            $('#reminderTime').val(preset.reminderTime);
                        } else {
                            $('#reminderHoursBefore').val(preset.hoursBefore);
                            $('#reminderMinutesBefore').val(preset.minutesBefore);
                        }

                        // Set daily reminder checkbox
                        document.getElementById('isDaily').checked = preset.isDaily;
                        
                        // Setup form validation
                        setupFormValidation(true);
                        
                        // Setup radio button controls
                        setupRadioButtonControls();
                    } else {
                        modalInstance.hide();
                        Swal.fire({
                            title: 'Error!',
                            text: response.message || 'Failed to load preset details',
                            icon: 'error',
                            confirmButtonText: 'OK'
                        });
                    }
                },
                error: function() {
                    modalInstance.hide();
                    Swal.fire({
                        title: 'Error!',
                        text: 'Failed to load preset details. Please try again.',
                        icon: 'error',
                        confirmButtonText: 'OK'
                    });
                }
            });
        }

        function deleteSetting(presetId) {
    Swal.fire({
        title: 'Are you sure?',
        text: "This notification preset will be permanently deleted!",
        icon: 'warning',
        showCancelButton: true,
        confirmButtonColor: '#dc3545',
        cancelButtonColor: '#6c757d',
        confirmButtonText: 'Yes, delete it!',
        cancelButtonText: 'Cancel',
        reverseButtons: true
    }).then((result) => {
        if (result.isConfirmed) {
            // Proceed with deletion
            $.ajax({
                url: '/NotificationPreset/AjaxDelete',
                type: 'POST',
                data: { id: presetId },
                success: function(response) {
                    if (response.success) {
                        Swal.fire({
                            title: 'Deleted!',
                            text: 'The notification preset has been deleted.',
                            icon: 'success',
                            confirmButtonText: 'OK'
                        }).then(() => {
                            // Reload the presets grid
                            loadPresets();
                        });
                    } else {
                        Swal.fire({
                            title: 'Error!',
                            text: response.message || 'Failed to delete the preset.',
                            icon: 'error',
                            confirmButtonText: 'OK'
                        });
                    }
                },
                error: function() {
                    Swal.fire({
                        title: 'Error!',
                        text: 'Failed to delete the preset. Please try again.',
                        icon: 'error',
                        confirmButtonText: 'OK'
                    });
                }
            });
        }
    });
}
    </script>
}