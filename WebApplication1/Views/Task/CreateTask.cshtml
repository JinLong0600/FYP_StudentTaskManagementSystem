@model StudentTaskManagement.ViewModels.L1TasksViewModel;
@using static StudentTaskManagement.Utilities.GeneralEnum;
@{
    ViewData["Title"] = Model.IsEdit ? "Edit Task" : "Create Task";
}

<div class="container-fluid py-4">
    <div class="row justify-content-center">
        <div class="col-lg-10">
            <div class="card shadow">
                <div class="card-header bg-gradient text-white" style="background-color: #4361ee;">
                    <h2 class="mb-0">@(Model.IsEdit ? "Edit" : "Create") Task</h2>
                </div>
                <div class="card-body">
                    <form id="createTaskForm" method="post" action="@(Model.IsEdit ? "/Task/Update/" + Model.TaskId : "/Task/Add")" enctype="multipart/form-data">
                        <!-- Basic Information -->
                        <div class="mb-5">
                            <h4 class="mb-4">Basic Information</h4>
                            <div class="row g-3">
                                <div class="col-md-6">
                                    <label class="form-label fw-semibold lb-required">Title</label>
                                    <input type="text" class="form-control" name="Title" id="Title" value="@Model.Title">
                                </div>
                                <div class="col-md-6">
                                    <label class="form-label fw-semibold lb-required">Category</label>
                                    <select class="form-control" name="Category" id="Category">
                                        <option value="">- Select type -</option>
                                        <option value="@((int)ItemTaskCategory.Academic)" selected=@(Model.Category == (int)ItemTaskCategory.Academic)>Academic</option>
                                        <option value="@((int)ItemTaskCategory.Extracurricular)" selected=@(Model.Category == (int)ItemTaskCategory.Extracurricular)>Extracurricular</option>
                                        <option value="@((int)ItemTaskCategory.PersonalDevelopment)" selected=@(Model.Category == (int)ItemTaskCategory.PersonalDevelopment)>Personal Development</option>
                                        <option value="@((int)ItemTaskCategory.Social)" selected=@(Model.Category == (int)ItemTaskCategory.Social)>Social</option>
                                        <option value="@((int)ItemTaskCategory.HealthWellness)" selected=@(Model.Category == (int)ItemTaskCategory.HealthWellness)>Health & Wellness</option>
                                        <option value="@((int)ItemTaskCategory.Miscellaneous)" selected=@(Model.Category == (int)ItemTaskCategory.Miscellaneous)>Miscellaneous</option>
                                    </select>
                                </div>
                                <div class="col-12">
                                    <label class="form-label fw-semibold">Description</label>
                                    <textarea class="form-control" name="Description" id="Description" rows="3">@Model.Description</textarea>
                                </div>
                                <div class="col-md-6">
                                    <label class="form-label fw-semibold">Start Date & Time</label>
                                    <input type="datetime-local" class="form-control" name="StartDate" id="StartDate" value="@(Model.StartDate.HasValue ? Model.StartDate.Value.ToString("yyyy-MM-ddTHH:mm") : "")">
                                </div>
                                <div class="col-md-6">
                                    <label class="form-label fw-semibold lb-required">Due Date & Time</label>
                                    <input type="datetime-local" class="form-control" name="DueDate" id="DueDate" value="@(Model.IsEdit ? Model.DueDate.ToString("yyyy-MM-ddTHH:mm") : "")">
                                </div>
                                <div class="col-md-6">
                                    <label class="form-label fw-semibold lb-required">Priority</label>
                                    <select class="form-control" name="Priority" id="Priority">
                                        <option value="">- Please select -</option>
                                        <option value="@((int)PriorityLevel.Trivial)" selected=@(Model.Priority == (int)PriorityLevel.Trivial)>Trivial</option>
                                        <option value="@((int)PriorityLevel.Low)" selected=@(Model.Priority == (int)PriorityLevel.Low)>Low</option>
                                        <option value="@((int)PriorityLevel.Medium)" selected=@(Model.Priority == (int)PriorityLevel.Medium)>Medium</option>
                                        <option value="@((int)PriorityLevel.High)" selected=@(Model.Priority == (int)PriorityLevel.High)>High</option>
                                        <option value="@((int)PriorityLevel.Critical)" selected=@(Model.Priority == (int)PriorityLevel.Critical)>Critical</option>
                                    </select>
                                </div>
                                <div class="col-md-6">
                                    <label class="form-label fw-semibold lb-required">Status</label>
                                    <select class="form-control" name="Status" id="Status">
                                        <option value="">- Please select -</option>
                                        <option value="@((int)ItemTaskStatus.NotStarted)" selected=@(Model.Status == (int)ItemTaskStatus.NotStarted)>Not Started</option>
                                        <option value="@((int)ItemTaskStatus.InProgress)" selected=@(Model.Status == (int)ItemTaskStatus.InProgress)>In Progress</option>
                                        <option value="@((int)ItemTaskStatus.Completed)" selected=@(Model.Status == (int)ItemTaskStatus.Completed)>Completed</option>
                                        <option value="@((int)ItemTaskStatus.OnHold)" selected=@(Model.Status == (int)ItemTaskStatus.OnHold)>On Hold</option>
                                    </select>
                                </div>
                            </div>
                        </div>

                        <!-- Task Settings -->
                        <div class="mb-5">
                            <h4 class="mb-4">Task Settings</h4>

                            <!-- Recurring Settings -->
                            <div class="row mb-4">
                                <div class="col-12">
                                    <label class="form-label fw-semibold lb-required">Recurring Settings</label>
                                    <div class="border rounded p-3">
                                        <div class="d-flex gap-4 mb-2">
                                            <div>
                                                <input type="radio" name="IsRecurring" id="noRecurring" value="0" >
                                                <label>No Recurring</label>
                                            </div>
                                            <div>
                                                <input type="radio" name="IsRecurring" id="useRecurring" value="1">
                                                <label>Set Recurring</label>
                                            </div>
                                        </div>
                                        <div id="recurringOptions" class="mt-3" style="display: none;">
                                            <div class="mb-3">
                                                <label class="form-label fw-semibold lb-required">Recurring Preset</label>
                                                @Html.DropDownListFor(m => m.L1RecurringPresetId,
                                                         new SelectList(ViewBag.SelectRecurringPresetList, "Value", "Text", Model.L1RecurringPresetId),
                                                         new
                                                         {
                                                             id = "recurringPreset",
                                                             @class = "form-control",
                                                             data_placeholder = "- Please select -",
                                                         })
                                            </div>
                                            <div id="customRecurringOptions" class="mt-3" style="display: none;">
                                                <div class="d-flex gap-4">
                                                    <div>
                                                        <input type="radio" name="DefaultRecurringOptions" id="DefaultRecurringOptions1" value="@((int)DefaultRecurringOptions.Daily)">
                                                        <label>Daily</label>
                                                    </div>
                                                    <div>
                                                        <input type="radio" name="DefaultRecurringOptions" id="DefaultRecurringOptions2" value="@((int)DefaultRecurringOptions.Weekly)">
                                                        <label>Weekly</label>
                                                    </div>
                                                    <div>
                                                        <input type="radio" name="DefaultRecurringOptions" id="DefaultRecurringOptions3" value="@((int)DefaultRecurringOptions.Monthly)">
                                                        <label>Monthly</label>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <!-- Notification Settings -->
                            <div class="row mb-4">
                                <div class="col-12">
                                    <label class="form-label fw-semibold lb-required">Notification Settings</label>
                                    <div class="border rounded p-3">
                                        <div class="d-flex gap-4 mb-2">
                                            <div>
                                                <input type="radio" name="IsNotification" id="noNotification" value="0" checked>
                                                <label>No Notifications</label>
                                            </div>
                                            <div>
                                                <input type="radio" name="IsNotification" id="useNotification" value="1">
                                                <label>Set Notifications</label>
                                            </div>
                                        </div>
                                        <div id="notificationOptions" class="mt-3" style="display: none;">
                                            <div class="mb-3">
                                                <label class="form-label fw-semibold lb-required">Notification Preset</label>
                                                @Html.DropDownListFor(m => m.L1NotificationPresetId,
                                                         new SelectList(ViewBag.SelectRecurringPresetList, "Value", "Text", Model.L1NotificationPresetId),
                                                         new
                                                         {
                                                             id = "notificationPresetSelect",
                                                             @class = "form-control",
                                                             data_placeholder = "- Please select -",
                                                         })
                                            </div>
                                            <div id="customNotificationOptions" class="mt-3" style="display: none;">
                                                <div class="d-flex gap-4">
                                                    <div>
                                                        <input type="radio" name="DefaultNotificationOptions" id="DefaultNotificationOptions1" value="@((int)DefaultNotificationOptions.ThirtyMin)">
                                                        <label>30 Minutes Before</label>
                                                    </div>
                                                    <div>
                                                        <input type="radio" name="DefaultNotificationOptions" id="DefaultNotificationOptions2" value="@((int)DefaultNotificationOptions.OneWeek)">
                                                        <label>1 Hour Before</label>
                                                    </div>
                                                    <div>
                                                        <input type="radio" name="DefaultNotificationOptions" id="DefaultNotificationOptions3" value="@((int)DefaultNotificationOptions.OneMonth)">
                                                        <label>1 Day Before</label>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- Subtasks -->
                        <div class="mb-5">
                            <div class="d-flex justify-content-between align-items-center mb-4">
                                <h4 class="mb-0">Subtasks</h4>
                                <button type="button" class="btn btn-primary btn-sm" id="addSubtask">
                                    <i class="fa fa-plus me-1"></i>Add Subtask
                                </button>
                            </div>
                            <div id="subtasksContainer">
                                <!-- Subtasks will be added here dynamically -->
                            </div>
                        </div>

                        <!-- Action Buttons -->
                        <div class="d-flex justify-content-end gap-2">
                            <button type="button" class="btn btn-outline-secondary" onclick="window.location.href='@Url.Action("Index", "Task")'">Cancel</button>
                            <button type="submit" id="btnSubmit" class="btn btn-primary btn-lg fw-bold">Create</button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
<script>

    // Convert ViewBag data to JavaScript array
    const notificationPresets = @Html.Raw(Json.Serialize(ViewBag.SelectNotificationPresetList));

    function addSubtask(index, subtask = null) 
    {
        let presetOptions = '';

        if (Array.isArray(notificationPresets)) {
            notificationPresets.forEach(preset => {
                const selected = subtask && subtask.l1NotificationPresetId === preset.value ? 'selected' : '';
                presetOptions += `<option value="${preset.value}" ${selected}>${preset.text}</option>`;
            });
        }else{
            notificationPresets.forEach(preset => {
            presetOptions += `<option value="${preset.value}">${preset.text}</option>`;
            });
        }

        const subtaskHtml = `
                <div class="subtask border rounded p-3 mb-3">
                <input type="hidden" name="Subtasks[${index}].Id" value="${subtask?.id || ''}">
                    <div class="d-flex justify-content-between mb-3">
                        <h5>Subtask #${index + 1}</h5>
                        <button type="button" class="btn btn-outline-danger btn-sm remove-subtask">
                            <i class="fa fa-trash"></i>
                        </button>
                    </div>

                    <div class="row g-3">
                        <div class="col-md-6">
                            <label class="form-label fw-semibold lb-required">Subtask Title</label>
                            <input 
                            type="text" 
                            name="Subtasks[${index}].Title"
                            id="Subtasks_${index}_Title"
                            class="form-control"/>
                        </div>
                        <div class="col-md-3">
                            <label class="form-label fw-semibold lb-required">Category</label>
                            <select class="form-control" name="Subtasks[${index}].Category" id="Subtasks_${index}_Category">
                                <option value="">- Please select-</option>
                                        <option value="@((int)ItemTaskCategory.Academic)">Academic</option>
                                        <option value="@((int)ItemTaskCategory.Extracurricular)">Extracurricular</option>
                                        <option value="@((int)ItemTaskCategory.PersonalDevelopment)">Personal Development</option>
                                        <option value="@((int)ItemTaskCategory.Social)">Social</option>
                                        <option value="@((int)ItemTaskCategory.HealthWellness)">Healt & hWellness</option>
                                        <option value="@((int)ItemTaskCategory.Miscellaneous)">Miscellaneous</option>
                            </select>
                        </div>
                        <div class="col-md-3">
                            <label class="form-label fw-semibold lb-required">Priority</label>
                            <select class="form-control" name="Subtasks[${index}].Priority" id="Subtasks_${index}_Priority">
                                <option value="">- Please select -</option>
                                <option value="@((int)PriorityLevel.Trivial)">Trivial</option>
                                <option value="@((int)PriorityLevel.Low)">Project</option>
                                <option value="@((int)PriorityLevel.Medium)">Meeting</option>
                                <option value="@((int)PriorityLevel.High)">Leisure</option>
                                <option value="@((int)PriorityLevel.Critical)">Others</option>
                            </select>
                        </div>
                        <div class="col-md-6">
                            <label class="form-label">Start Date & Time</label>
                            <input type="datetime-local" class="form-control" name="Subtasks[${index}].StartDate">
                        </div>
                        <div class="col-md-6">
                            <label class="form-label fw-semibold lb-required">Due Date & Time</label>
                            <input type="datetime-local" class="form-control" name="Subtasks[${index}].DueDate" id="Subtasks_${index}_DueDate">
                        </div>
                        <div class="col-12">
                            <label class="form-label">Description</label>
                            <textarea class="form-control" name="Subtasks[${index}].Description" rows="2"></textarea>
                        </div>
                        <div class="col-12">
                            <label class="form-label fw-semibold lb-required">Notification Settings</label>
                            <div class="border rounded p-3">
                                <div class="d-flex gap-4 mb-2">
                                    <div>
                                        <input type="radio" name="Subtasks[${index}].IsNotification" id="noNotification_${index}" value="0" class="subtask-notification-toggle" checked>
                                        <label>No Notifications</label>
                                    </div>
                                    <div>
                                        <input type="radio" name="Subtasks[${index}].IsNotification" id="useNotification_${index}" value="1"  class="subtask-notification-toggle">
                                        <label>Set Notifications</label>
                                    </div>
                                </div>
                                <div class="subtask-notification-options mt-3" style="display: none;">
                                    <div class="mb-3">
                                        <label class="form-label fw-semibold lb-required">Notification Preset</label>
                                        <select class="form-control subtask-notification-preset" name="Subtasks[${index}].L1NotificationPresetId" id="Subtasks_${index}_L1NotificationPresetId">
                                            ${presetOptions}
                                        </select>
                                    </div>
                                    <div class="subtask-custom-notification-options mt-3" style="display: none;">
                                        <div class="d-flex gap-4">
                                            <div>
                                                <input type="radio" name="Subtasks[${index}].DefaultNotificationOptions" id="DefaultNotificationOptions1_Subtasks${index}" value="@((int)DefaultNotificationOptions.ThirtyMin)">
                                                <label>30 Minutes Before</label>
                                            </div>
                                            <div>
                                                <input type="radio" name="Subtasks[${index}].DefaultNotificationOptions" id="DefaultNotificationOptions2_Subtasks${index}" value="@((int)DefaultNotificationOptions.OneWeek)">
                                                <label>1 Hour Before</label>
                                            </div>
                                            <div>
                                                <input type="radio" name="Subtasks[${index}].DefaultNotificationOptions" id="DefaultNotificationOptions3_Subtasks${index}" value="@((int)DefaultNotificationOptions.OneMonth)">
                                                <label>1 Day Before</label>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            `;
        return subtaskHtml;
    }

        $(document).ready(function () {
            reinitializeValidator();
            var isEdit = @Json.Serialize(Model.IsEdit);
            var isRecurring = @Json.Serialize(Model.IsRecurring);
            var l1RecurringTaskSettingId = @Json.Serialize(Model.L1RecurringPresetId);
            var defaultRecurringOptions = @Json.Serialize(Model.DefaultRecurringOptions);
            var isNotification = @Json.Serialize(Model.IsNotification);
            var l1NotificationPresetId = @Json.Serialize(Model.L1NotificationPresetId);
            var defaultNotificationOptions = @Json.Serialize(Model.DefaultNotificationOptions);

            let subtaskCount = 0;
            const maxSubtasks = 5;

            // Add Subtask
            $('#addSubtask').click(function () {
                if (subtaskCount >= maxSubtasks) 
                {
                    Swal.fire({
                        title: 'Maximum Limit Reached',
                        text: 'You can only create up to 5 subtasks.',
                        icon: 'warning',
                        confirmButtonText: 'OK'
                    });
                    return;
                }
                else
                {
                    const subtaskHtml = addSubtask(subtaskCount);
                    $('#subtasksContainer').append(subtaskHtml);
                    addSubtaskValidation(subtaskCount);
                    subtaskCount++;
                }

                // Optionally, disable the "Add Subtask" button when limit is reached
                if (subtaskCount >= maxSubtasks) {
                        $('#addSubtask').prop('disabled', true);
                }
            });

            // Remove Subtask
            $(document).on('click', '.remove-subtask', function () {
                $(this).closest('.subtask').remove();
                // Reindex remaining subtasks
                $('.subtask').each(function (index) {
                    $(this).find('h5').text(`Subtask #${index + 1}`);
                    // Update input names
                    $(this).find('[name^="Subtasks["]').each(function () {
                        const oldName = $(this).attr('name');
                        const newName = oldName.replace(/\[\d+\]/, `[${index}]`);
                        $(this).attr('name', newName);
                    });
                });
                subtaskCount--;
            });

            // Handle Recurring Settings
            if (isEdit && isRecurring)
            {
                $('#useRecurring').prop('checked', true);
                $('#recurringOptions').slideDown();

                if (l1RecurringTaskSettingId === 0) {
                    $('#recurringPreset').val('0');
                    $('#customRecurringOptions').show();
                    
                    // Set the correct radio button for custom options
                    if (defaultRecurringOptions) {
                        $(`input[name="DefaultRecurringOptions"][value="${defaultRecurringOptions}"]`).prop('checked', true);
                    }
                }
            }
            else
            {
                $('#noRecurring').prop('checked', true);
                $('#recurringOptions').slideUp();
                $('#recurringPreset').val('');
                $('#customRecurringOptions').slideUp();
                $('input[name="recurring"]').prop('checked', false);
            }


            $('input[name="IsRecurring"]').change(function () {
                if ($(this).val() === "1") {
                    $('#recurringOptions').slideDown();
                } else {
                    $('#recurringOptions').slideUp();
                    $('#recurringPreset').val('');
                    $('#customRecurringOptions').slideUp();
                    $('input[name="recurring"]').prop('checked', false);
                }
            });

            // Handle Recurring Preset Selection
            $('#recurringPreset').change(function () {
                if ($(this).val() === '0') {
                    $('#customRecurringOptions').slideDown();
                    $(`input[name="DefaultRecurringOptions"][value="1"]`).prop('checked', true);
                } else {
                    $('#customRecurringOptions').slideUp();
                    $('input[name="recurring"]').prop('checked', false);
                }
            });

            // Handle Notification Settings
            if (isEdit && isNotification)
            {
                $('#useNotification').prop('checked', true);
                $('#notificationOptions').slideDown();

                if (l1NotificationPresetId === 0) {
                    $('#notificationPreset').val('0');
                    $('#customNotificationOptions').show();
                    
                    // Set the correct radio button for custom options
                    if (defaultNotificationOptions) {
                        $(`input[name="DefaultNotificationOptions"][value="${defaultNotificationOptions}"]`).prop('checked', true);
                    }
                }
            }
            else
            {
                $('#notificationOptions').slideUp();
                $('#notificationPresetSelect').val('');
                $('#customNotificationOptions').slideUp();
                $('input[name="notification"]').prop('checked', false);
            }

            $('input[name="IsNotification"]').change(function () {
                if ($('#useNotification').prop('checked')) {
                    $('#notificationOptions').slideDown();
                } else {
                    $('#notificationOptions').slideUp();
                    $('#notificationPresetSelect').val('');
                    $('#customNotificationOptions').slideUp();
                    $('input[name="notification"]').prop('checked', false);
                }
        });

            // Handle Notification Preset Selection
            $('#notificationPresetSelect').change(function () {
                if ($(this).val() === '0') {
                    $('#customNotificationOptions').slideDown();
                    $(`input[name="DefaultNotificationOptions"][value="1"]`).prop('checked', true);
                } else {
                    $('#customNotificationOptions').slideUp();
                    $('input[name="notification"]').prop('checked', false);
                }
            });

            // Add event handlers for the notification toggles
            $(document).on('change', '.subtask-notification-toggle', function() {
                const notificationOptions = $(this).closest('.border').find('.subtask-notification-options');
                if ($(this).val() === '1') {
                    notificationOptions.slideDown();
                } else {
                    notificationOptions.slideUp();
                    notificationOptions.find('select').val('');
                    notificationOptions.find('.subtask-custom-notification-options').slideUp();
                    notificationOptions.find('input[type="radio"]').prop('checked', false);
                }
            });

            // Handle notification preset selection for subtasks
            $(document).on('change', '.subtask-notification-preset', function() {
                const customOptions = $(this).closest('.subtask-notification-options').find('.subtask-custom-notification-options');
                if ($(this).val() === '0') {
                    customOptions.slideDown();
                } else {
                    customOptions.slideUp();
                    customOptions.find('input[type="radio"]').prop('checked', false);
                }
            });

            // Get the model data
            const modelData = @Html.Raw(Json.Serialize(Model));
            // Initialize existing subtasks if any
            if (modelData && modelData.subtasksList && modelData.subtasksList.length > 0) {
                modelData.subtasksList.forEach((subtasksList, index) => {
                    // Create subtask HTML
                    subtaskCount++;

                    const subtaskHtml = addSubtask(index, subtasksList);
                    $('#subtasksContainer').append(subtaskHtml);

                    // Set values for the subtask
                    const $subtaskDiv = $('#subtasksContainer').children().last();

                    // Set basic fields
                    $subtaskDiv.find(`[name="Subtasks[${index}].Title"]`).val(subtasksList.title);
                    $subtaskDiv.find(`[name="Subtasks[${index}].Category"]`).val(subtasksList.category);
                    $subtaskDiv.find(`[name="Subtasks[${index}].Priority"]`).val(subtasksList.priority);
                    $subtaskDiv.find(`[name="Subtasks[${index}].Description"]`).val(subtasksList.description);

                    // Set dates
                    if (subtasksList.startDate) {
                        $subtaskDiv.find(`[name="Subtasks[${index}].StartDate"]`)
                            .val(subtasksList.startDate);
                    }
                    if (subtasksList.dueDate) {
                        $subtaskDiv.find(`[name="Subtasks[${index}].DueDate"]`)
                            .val(subtasksList.dueDate);
                    }
                    console.log(subtasksList.isNotification);
                    // Set notification settings
                    if (subtasksList.isNotification === true) {
                        const $notificationToggle = $subtaskDiv.find(`[name="Subtasks[${index}].IsNotification"][value="1"]`);
                        $notificationToggle.prop('checked', true).trigger('change');

                        // Set notification preset
                        $subtaskDiv.find(`[name="Subtasks[${index}].L1NotificationPresetId"]`)
                            .val(subtasksList.l1NotificationPresetId);

                        // Handle custom notifications if needed
                        if (subtasksList.l1NotificationPresetId === 0) {
                            $subtaskDiv.find('.subtask-custom-notification-options').show();
                            $subtaskDiv.find(`[name="Subtasks[${index}].DefaultNotificationOptions"][value="${subtasksList.defaultNotificationOptions}"]`)
                                .prop('checked', true);
                            //$subtaskDiv.find(`[name="Subtasks[${index}].NotificationTime"]`).val(subtasksList.notificationTime);
                        }
                    }
                });

                // Update subtask counter
                subtaskCount = modelData.subtasksList.length;
            } else { 
                console.log("can't load");
            }
        });

    function reinitializeValidator() {
        $("#createTaskForm").removeData("validator");
        $("#createTaskForm").validate({
            rules: {
                Title: {
                    required: true,
                    maxlength: 50
                },
                Category: {
                    required: true
                },
                DueDate: {
                    required: true
                },
                Priority: {
                    required: true
                },
                Status: {
                    required: true
                },
                L1RecurringTaskSettingId: {
                    required: true
                },
                L1NotificationPresetId: {
                    required: true    
                }
            },
            errorElement: 'span',
            errorClass: 'invalid-feedback',
            highlight: function (element, errorClass, validClass) {
                $(element).addClass('is-invalid');
            },
            unhighlight: function (element, errorClass, validClass) {
                $(element).removeClass('is-invalid');
            },
            errorPlacement: function (error, element) {
                error.insertAfter(element);
            },
            submitHandler: function (form) {
                event.preventDefault();

                var subtasks = [];
                $('.subtask').each(function(index) {
                    var subtask = {
                        Title: $(this).find('[name^="Subtasks["][name$="].Title"]').val(),
                        Category: $(this).find('[name^="Subtasks["][name$="].Category"]').val(),
                        Description: $(this).find('[name^="Subtasks["][name$="].Description"]').val(),
                        Priority: $(this).find('[name^="Subtasks["][name$="].Priority"]').val(),
                        Status: $(this).find('[name^="Subtasks["][name$="].Status"]').val(),
                        StartDate: $(this).find('[name^="Subtasks["][name$="].StartDate"]').val(),
                        DueDate: $(this).find('[name^="Subtasks["][name$="].DueDate"]').val(),
                        IsNotification: $(this).find('[name^="Subtasks["][name$="].IsNotification"]:checked').val() == "0" ? false : true,
                        L1NotificationPresetId: $(this).find('[name^="Subtasks["][name$="].L1NotificationPresetId"]:checked').val(),
                        DefaultNotificationOptions: $(this).find('[name^="Subtasks["][name$="].DefaultNotificationOptions"]:checked').val(),
                    };
                    subtasks.push(subtask);
                });

                var formData = {
                    Title: $('#Title').val(),
                    Category: $('#Category').val(),
                    Description: $('#Description').val(),
                    Priority: $('#Priority').val(),
                    Status: $('#Status').val(),
                    StartDate: $('#StartDate').val(),
                    DueDate: $('#DueDate').val(),
                    IsRecurring: $('input[name="IsRecurring"]:checked').val() == "0" ? false : true,
                    L1RecurringPresetId: $('#recurringPreset').val(),
                    DefaultRecurringOptions: $('input[name="DefaultRecurringOptions"]:checked').val(),
                    IsNotification: $('input[name="IsNotification"]:checked').val() == "0" ? false : true,
                    L1NotificationPresetId: $('#notificationPresetSelect').val(),
                    DefaultNotificationOptions: $('input[name="DefaultNotificationOptions"]:checked').val(),
                    Subtasks: JSON.stringify(subtasks),
                };

                $.ajax({
                    url: form.action,
                    type: "POST",
                    data: formData,
                    success: function (response) {
                        if (response.success) {
                            Swal.fire({
                                title: response.title,
                                text: response.message,
                                icon: "success",
                                confirmButtonText: "OK"
                            }).then((result) => {
                                if (result.isConfirmed) {
                                    window.location.href = "/Task/Index";
                                }
                            });
                        } else {
                            Swal.fire({
                                title: response.title,
                                text: response.message,
                                icon: "error",
                                confirmButtonText: "OK"
                            });
                        }
                    },
                    error: function (xhr, status, error) {
                        console.error("Error:", error);
                        Swal.fire({
                            title: "Error!",
                            text: "An unexpected error occurred. Please try again.",
                            icon: "error",
                            confirmButtonText: "OK"
                        });
                    }
                });
                return false;
            }
        });
    }

    function addSubtaskValidation(index) {
        // Destroy existing validation
        $("#createTaskForm").removeData("validator");
        $("#createTaskForm").removeData("unobtrusiveValidation");

        // Re-add validation
        reinitializeValidator();
        $.validator.unobtrusive.parse("#createTaskForm");
        $(`#Subtasks_${index}_Title`).rules('add', {
            required: true,
            maxlength: 50
        });
    
        $(`#Subtasks_${index}_Category`).rules('add', {
            required: true,
        });

        $(`#Subtasks_${index}_DueDate`).rules('add', {
            required: true,
        });

        $(`#Subtasks_${index}_Priority`).rules('add', {
            required: true,
        });

        $(`#Subtasks_${index}_Status`).rules('add', {
            required: true,
        });

        $(`#Subtasks_${index}_L1NotificationPresetId`).rules('add', {
            required: true,
        });
    }
</script>
}
