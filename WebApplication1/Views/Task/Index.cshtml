@model StudentTaskManagement.ViewModels.L1TasksViewModel;
@{
    ViewData["Title"] = "Task";
}

<script>
document.querySelector('.sidebar').addEventListener('click', function() {
    this.classList.toggle('collapsed');
    document.querySelector('.main-content').classList.toggle('expanded');
});
</script>
@{
    string TruncateDescription(string description, int wordCount = 15)
    {
        if (string.IsNullOrEmpty(description)) return description;
        
        var words = description.Split(' ');
        if (words.Length <= wordCount) return description;
        
        return string.Join(" ", words.Take(wordCount)) + "...";
    }
}


<!-- Main Content Container -->
<div class="main-content child-content p-4">
    <!-- Single Tab Navigation with counts -->
    <div class="simple-tabs mb-4">
        <div class="d-flex justify-content-between align-items-center">
            <div class="tab-links">
                <a href="#" class="tab-link active" data-tab="thisWeek" onclick="loadTasks('thisWeek');">
                    This week's Tasks
                    <span class="task-count" id="thisWeekTasks"></span>
                </a>
                <a href="#" class="tab-link" data-tab="upcoming"  onclick="loadTasks('upcoming');">
                    Upcoming's Task
                    <span class="task-count" id="upcomingTask"></span>
                </a>
                <a href="#" class="tab-link" data-tab="completed"  onclick="loadTasks('completed');">
                    Completed
                    <span class="task-count" id="completedTask"></span>
                </a>
            </div>
            
            <!-- Add New Task Button -->
            <button class="btn btn-primary" onclick="window.location.href='@Url.Action("CreateTask", "Task")'">
                <i class="fas fa-plus me-2"></i>Add New Task
            </button>
        </div>
    </div>

    <!-- Content Area -->
    <div id="taskContent">
        <!-- Search and Filter Bar -->
        <div class="filter-section mb-4">
            <div class="row g-3 align-items-center">
                <div class="col-lg-4">
                    <input type="text" class="form-control" placeholder="Search tasks...">
                </div>
                <div class="col-lg-2">
                    <select class="form-select" id="statusFilter">
                        <option value="">Status: All</option>
                        <option value="notstarted">Not Started</option>
                        <option value="inprogress">In Progress</option>
                        <option value="completed">Completed</option>
                        <option value="onhold">On Hold</option>
                    </select>
                </div>
                <div class="col-lg-2">
                    <select class="form-select" id="priorityFilter">
                        <option value="">Priority: All</option>
                        <option value="critical">Critical</option>
                        <option value="high">High</option>
                        <option value="medium">Medium</option>
                        <option value="low">Low</option>
                    </select>
                </div>
                <div class="col-lg-2">
                    <input type="date" class="form-control" placeholder="Due Date">
                </div>
                <div class="col-lg-2">
                    <button class="btn btn-primary w-100">Filter</button>
                </div>
            </div>
        </div>

        <!-- Task Cards Grid -->
        <div class="row g-4" id="taskGrid">

        </div>

        <!-- Pagination -->
        <div class="pagination-container mt-4">
            <nav aria-label="Recurring pattern pages">
                <ul class="pagination justify-content-center">
                </ul>
            </nav>
        </div>
    </div>
</div>

<!-- Task Details Modal -->
<div class="modal fade" id="taskDetailsModal" tabindex="-1" aria-labelledby="taskDetailsModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <!-- Modal Header -->
            <div class="modal-header">
                <h5 class="modal-title" id="modalTaskTitle"></h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>

            <!-- Modal Body -->
            <div class="modal-body">
            </div>

            <!-- Modal Footer -->
            <div class="modal-footer d-flex justify-content-between">
            </div>
        </div>
    </div>
</div>

<script>
    function showTaskDetails(taskId) {
        // Get the modal element
        const modalElement = document.getElementById('taskDetailsModal');

        if (!modalElement) {
            console.error('Modal element not found');
            return;
        }

        try {
            // Create and show the modal
            const modal = new bootstrap.Modal(modalElement);
            modal.show();
        } catch (error) {
            console.error('Error showing modal:', error);
        }
    }
    function getTaskDetails(taskId) {
        const modalElement = document.getElementById('taskDetailsModal');
        const modal = new bootstrap.Modal(modalElement);
        $.ajax({
            url: `/Task/GetTaskDetails/${taskId}`,
            type: 'GET',
            dataType: 'json',
            success: function(response) {
                if (response.success) {
                    // Update modal header with title and category
                    let modalHeader = `
                        <div class="d-flex align-items-center justify-content-between w-100">
                            <div class="d-flex align-items-center gap-2">
                                <h5 class="modal-title" id="modalTaskTitle">${response.data.task.title}</h5>
                                <span class="badge category-badge">
                                    <i class="fa-solid fa-layer-group me-1"></i>${response.data.task.category || 'Uncategorized'}
                                </span>
                            </div>
                            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                        </div>
                    `;
                    $('.modal-header').html(modalHeader);

                    // Create modal body content
                    let modalContent = `
                        <!-- Quick Actions Row -->
                        <div class="quick-actions mb-4">
                            <div class="status-priority-line">
                                <!-- Status -->
                                <div class="status-group">
                                    <span class="status-label me-2" style="font-weight: 500;">Status</span>
                                    <span class="badge status-badge-modal status-${response.data.task.statuscss}">
                                        ${response.data.task.statusDisplay}
                                    </span>
                                </div>

                                <span class="separator">•</span>

                                <!-- Priority -->
                                <div class="priority-group">
                                        <span class="priority-label me-2" style="font-weight: 500;">Priority</span>
                                    <span class="badge priority-badge-modal priority-${response.data.task.prioritycss}">
                                        ${response.data.task.priorityDisplay}
                                    </span>
                                </div>

                                <span class="separator">•</span>

                                <!-- Due Date -->
                                <div class="due-date-group">
                                    <span class="due-date-label me-2" style="font-weight: 500;">Due Date</span>
                                    <span class="badge due-date-badge ${response.data.task.dueDatecss}">
                                        <i class="fas fa-calendar-alt me-1"></i>${response.data.task.dueDate}
                                    </span>
                                </div>
                            </div>
                        </div>

                        <!-- Description -->
                        <div class="task-description mb-4">
                            <h6 class="section-title">Description</h6>
                            <p id="modalTaskDescription" class="description-text">
                                ${generationNullDescription(response.data.task.description)}
                            </p>
                        </div>

                        <!-- Task Settings -->
                        <div class="task-settings mb-4">
                            <div class="row">
                                <!-- Notification Preset -->
                                <div class="col-md-6">
                                    <div class="setting-card">
                                        <h6 class="section-title">
                                            <i class="fas fa-bell me-2"></i>Notification Preset
                                            ${response.data.notificationPreset?.isSystemDefault ? '<span class="badge bg-secondary ms-2" title="System Default"><i class="fas fa-cog"></i></span>' : ''}
                                            ${response.data.notificationPreset ? '<span class="badge notification-type-badge"><i class="fas fa-clock me-1"></i>' + response.data.notificationPreset.type + '</span>' : ""}
                                        </h6>
                                        ${response.data.notificationPreset ? `
                                            <div class="preset-details">
                                                <h6 class="preset-name mb-2">${response.data.notificationPreset.name}</h6>
                                                <p class="preset-description mb-2">
                                                    ${generationNullDescription(response.data.notificationPreset.description)}
                                                </p>
                                                <div class="preset-type">
                                                    ${response.data.notificationPreset?.isSystemDefault ? '<span class="badge bg-secondary ms-2" title="System Default"><i class="fas fa-cog"></i></span>' : createNotificationSettingPills(response.data.notificationPreset) }
                                                </div>
                                            </div>
                                        ` : `
                                            <p class="setting-value text-muted">
                                                <i class="fas fa-times-circle me-1"></i>No notification preset
                                            </p>
                                        `}
                                    </div>
                                </div>
                                <!-- Recurring Pattern -->
                                <div class="col-md-6">
                                    <div class="setting-card">
                                        <h6 class="section-title">
                                                <i class="fas fa-redo me-2"></i>Recurring Pattern
                                                ${response.data.recurringPreset?.isSystemDefault ? '<span class="badge bg-secondary ms-2" title="System Default"><i class="fas fa-cog"></i></span>' : ''}
                                                ${response.data.recurringPreset ? '<span class="badge recurring-type-badge"><i class="fas fa-clock me-1"></i>' + response.data.recurringPreset.type + '</span>' : ""}
                                        </h6>
                                            ${response.data.recurringPreset ? `
                                            <div class="preset-details">
                                                    <h6 class="preset-name mb-2">${response.data.recurringPreset.name}</h6>
                                                <p class="preset-description mb-2">
                                                        ${generationNullDescription(response.data.recurringPreset.description)}
                                                </p>
                                                <div class="preset-type">
                                                    ${
                                                        response.data.recurringPreset?.isSystemDefault ? 
                                                        '<span class="badge bg-secondary ms-2" title="System Default"><i class="fas fa-cog"></i></span>' :
                                                        createRecurringSettingPills(response.data.recurringPreset)
                                                    }
                                                </div>
                                            </div>
                                        ` : `
                                            <p class="setting-value text-muted">
                                                <i class="fas fa-times-circle me-1"></i>No recurring preset
                                            </p>
                                        `}
                                </div>
                            </div>
                        </div>`;

                        if(response.data.subtasks.length != 0)
                        {
                            console.log(response.data.subtasks);
                        modalContent += `
                            <!-- Subtasks Section -->
                            <div class="subtasks-section">
                                <h6 class="section-title mt-3 mb-3">
                                    Subtasks (${response.data.subtasks.filter(st => st.status === 2).length}/${response.data.subtasks.length} Completed)
                                </h6>
                                <div class="subtask-list">
                                    ${response.data.subtasks.map(subtask => `
                                        <div class="subtask-item mb-3">
                                            <div class="d-flex justify-content-between align-items-start">
                                                <div class="subtask-main w-100">
                                                <div class="d-flex align-items-center gap-2">
                                                    <h6 class="subtask-title">${subtask.title}</h6>
                                                    <span class="badge category-badge">
                                                        <i class="fa-solid fa-layer-group me-1"></i>${subtask.category || 'Uncategorized'}
                                                    </span>
                                                </div>
                                        <div class="status-priority-line-subtask mt-2 mb-2">
                                            <!-- Status -->
                                            <div class="status-group">
                                                <span class="status-label-subtask me-2" style="font-weight: 500;">Status</span>
                                                <span class="badge status-badge-modal-subtask status-${subtask.statuscss}">
                                                    ${subtask.statusDisplay}
                                                </span>
                                            </div>

                                            <span class="separator">•</span>

                                            <!-- Priority -->
                                            <div class="priority-group">
                                                    <span class="priority-label-subtask me-2" style="font-weight: 500;">Priority</span>
                                                <span class="badge priority-badge-modal-subtask priority-${subtask.prioritycss}">
                                                    ${subtask.priorityDisplay}
                                                </span>
                                            </div>

                                            <span class="separator">•</span>

                                            <!-- Due Date -->
                                            <div class="due-date-group">
                                                <span class="due-date-label-subtask me-2" style="font-weight: 500;">Due Date</span>
                                                <span class="badge due-date-badge-subtask ${subtask.dueDatecss}">
                                                    <i class="fas fa-calendar-alt me-1"></i>${subtask.dueDate}
                                                </span>
                                            </div>
                                        </div>

                                        ${subtask.notificationPreset ? `
                                                        <div class="row">
                                        <!-- Notification Preset -->
                                        <div class="col-md-12">
                                            <div class="setting-card">
                                                <h6 class="section-title-subtask">
                                                    <i class="fas fa-bell me-2"></i>Notification Preset
                                                    ${subtask.notificationPreset?.isSystemDefault ? '<span class="badge bg-secondary ms-2" title="System Default"><i class="fas fa-cog"></i></span>' : ''}
                                                    ${subtask.notificationPreset ? '<span class="badge notification-type-badge"><i class="fas fa-clock me-1"></i>' + subtask.notificationPreset.type + '</span>' : ""}
                                                </h6>
                                                ${subtask.notificationPreset ? `
                                                    <div class="preset-details">
                                                        <h6 class="preset-name mb-2">${subtask.notificationPreset.name}</h6>
                                                        <p class="preset-description mb-2">
                                                            ${generationNullDescription(subtask.notificationPreset.description)}
                                                        </p>
                                                        <div class="preset-type">
                                                            ${subtask.notificationPreset?.isSystemDefault ? '<span class="badge bg-secondary ms-2" title="System Default"><i class="fas fa-cog"></i></span>' : createNotificationSettingPills(subtask.notificationPreset)}
                                                        </div>
                                                    </div>
                                                ` : `
                                                    <p class="setting-value text-muted">
                                                        <i class="fas fa-times-circle me-1"></i>No notification preset
                                                    </p>
                                                `}
                                            </div>
                                        </div>
                                                </div>
                                                    ` : ''}

                                                </div>

                                            </div>
                                        </div>
                                    `).join('')}
                                </div>
                            </div>` ;
                        }
                        
                        let modalFooter = `
                            <button type="button" class="btn btn-outline-secondary" data-bs-dismiss="modal">Close</button>
                            <button type="button" class="btn btn-primary" onclick="window.location.href='/Task/CreateTask/${response.data.task.taskId}'">View Full Details</button>
                        `

                        // Update modal body
                        $('.modal-body').html(modalContent);
                        $('.modal-footer').html(modalFooter);

                        // Reinitialize tooltips
                        $('[data-bs-toggle="tooltip"]').tooltip();
                        modal.show();
                    }
                },
                error: function(xhr, status, error) {
                    $('.modal-body').html(`
                        <div class="alert alert-danger">
                            <i class="fas fa-exclamation-circle me-2"></i>
                            Error loading task details. Please try again.
                        </div>
                    `);
                    console.error('Error fetching task details:', error);
                }
            });
        }


    function loadTasks(type = 'thisweek', page = 1, searchTerm = '', status = '', priority = '') {
        const taskGrid = document.getElementById('taskGrid');
        taskGrid.innerHTML = '<div class="text-center"><i class="fas fa-spinner fa-spin fa-2x"></i></div>';
        
        const urlMap = {
            'thisWeek': '/Task/GetThisWeekTasks',
            'upcoming': '/Task/GetUpcomingTasks',
            'completed': '/Task/GetCompletedTasks'
        };

        $.ajax({
            url: "/Task/GetTasks?type=" + type,
            type: 'GET',
            data: {
                page: page,
                searchTerm: searchTerm,
                status: status,
                priority: priority
            },
            success: function (response) {
                if (response.success) {
                    taskGrid.innerHTML = '';

                    response.data.tasks.forEach(task => {
                        const taskCard = createTaskCardItem(task);
                        taskGrid.insertAdjacentHTML('beforeend', taskCard);
                    });

                    // Update pagination

                    updatePagination(type, response.data.currentPage, response.data.totalPages);

                    // Update task counts in tabs
                    //getTaskCounts(response.data);
                } else {
                    taskGrid.innerHTML = `
                                <div class="alert alert-info text-center">
                                    <i class="fas fa-info-circle me-2"></i>
                                    No tasks found
                                </div>`;
                }
            },
            error: function () {
                taskGrid.innerHTML = `
                            <div class="alert alert-danger text-center">
                                <i class="fas fa-exclamation-circle me-2"></i>
                                Failed to load tasks. Please try again.
                            </div>`;
            }
        });
    }

    function updatePagination(type, currentPage, totalPages) {
        const pagination = document.querySelector('.pagination');

        let paginationHtml = '';
        if (totalPages >= 1) {
            // Previous button
            paginationHtml += `
                                <li class="page-item ${currentPage === 1 ? 'disabled' : ''}">
                                    <a class="page-link" href="#" onclick="loadTasks(${type}, ${currentPage - 1})" tabindex="-1">
                                        <i class="fas fa-chevron-left"></i>
                                    </a>
                                </li>
                            `;

            // Page numbers
            for (let i = 1; i <= totalPages; i++) {
                paginationHtml += `
                                    <li class="page-item ${i === currentPage ? 'active' : ''}">
                                        <a class="page-link" href="#" onclick="loadTasks(${type}, ${i})">${i}</a>
                                    </li>
                                `;
            }

            // Next button
            paginationHtml += `
                                <li class="page-item ${currentPage === totalPages ? 'disabled' : ''}">
                                    <a class="page-link" href="#" onclick="loadTasks(${type}, ${currentPage + 1})">
                                        <i class="fas fa-chevron-right"></i>
                                    </a>
                                </li>
                            `;
        }
        pagination.innerHTML = paginationHtml;
    }

    function createTaskCardItem(task) {
          let modelContent = `<div class="col-md-4">
            <div class="task-card priority-${task.prioritycss}" onclick="getTaskDetails(${task.id})">
                <div class="d-flex justify-content-between align-items-start">
                    <div class="priority-badge priority-${task.prioritycss}">Priority: ${task.priority}</div>
                    <div class="task-icons">
                        ${task.isNotification ? '<span class="icon-pill notification-pill"><i class="fas fa-bell"></i></span>' : ''}
                        ${task.isRecurring ? '<span class="icon-pill recurring-pill"><i class="fas fa-redo"></i></span>' : ''}
                    </div>
                </div>
                <div class="task-header">
                <div class="title-section">
                    <h5 class="card-title mb-1">${task.title}</h5>
                    <div class="category-label">
                        <i class="fa-solid fa-layer-group me-1"></i>${task.category}
                    </div>
                </div>
                <span class="status-badge status-${task.statuscss}">${task.statusDisplay}</span>
                </div>
                <div class="task-description">
                    <p class="card-text">${generationNullDescription(task.description)}</p>
                </div>
                <div class="task-due-pill ${task.dueDatecss}">
                    <i class="fas fa-calendar-alt"></i>
                    Due : ${task.dueDate}
                </div>`;
        if (task.totalSubtasksCount != "0") {
            modelContent += `<hr class="task-separator">

                                <div class="progress-section">
                                    <div class="subtask-header">
                                        <div class="subtask-info">
                                            <i class="fas fa-tasks"></i> Subtasks
                                        </div>
                                        <div class="subtask-ratio"> ${task.completedSubtasksCount} / ${task.totalSubtasksCount} </div>
                                    </div>
                                    <div class="progress">
                                        <div class="progress-bar ${task.dueDatecss}"
                                             role="progressbar"
                                             style="width: ${task.progress}%"
                                             data-bs-toggle="tooltip"
                                             data-bs-placement="top">
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        `;
        } else {
            modelContent += `<hr class="task-separator">

                                    <div class="progress-section">
                                        <div class="subtask-header">
                                            <div class="subtask-info no-subtask">
                                                This task doesn't have any Subtasks
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            `;
        }
        return modelContent;
    }
    
    function generationNullDescription(description) {
        if (description == null || description == "") {
            return `<span style="font-size: 0.75rem; font-style: italic; color:#878787;">- No description provided -</span>`;
        } else {
            return description;
        }

    }

    function getTaskCounts() {
        $.ajax({
            url: '/Task/GetTaskCount',
            type: 'GET',
            dataType: 'json',
            success: function(response) {
                if (response.success) {
                    // Update the task counts in the tabs
                    $('#thisWeekTasks').text(response.data.thisWeekTask);
                    $('#upcomingTask').text(response.data.upcomingTask);
                    $('#completedTask').text(response.data.completedTask);
                } else {
                    console.error('Failed to fetch task counts:', response.message);
                }
            },
            error: function(xhr, status, error) {
                console.error('Error fetching task counts:', error);
                // Optionally show an error message to the user
                // You could add error indicators to the count displays
                $('#thisWeekTasks, #upcomingTask, #completedTask').text('-');
            }
        });
    }

    function getTasksByType(type) {
        // Map of URLs for different task types
        const urlMap = {
            'thisWeek': '/Task/GetThisWeekTasks',
            'upcoming': '/Task/GetUpcomingTasks',
            'completed': '/Task/GetCompletedTasks'
        };

        $.ajax({
            url: urlMap[type],
            type: 'GET',
            dataType: 'json',
            success: function(response) {
                if (response.success) {
                    // Update task list
                    updateTaskList(response.data.tasks);
                    // Update count for the specific tab
                    $(`#${type}Tasks`).text(response.data.count);
                } else {
                    console.error(`Failed to fetch ${type} tasks:`, response.message);
                }
            },
            error: function(xhr, status, error) {
                console.error(`Error fetching ${type} tasks:`, error);
                // Show error message in task list
                $('#taskList').html(`
                    <div class="alert alert-danger">
                        <i class="fas fa-exclamation-circle me-2"></i>
                        Failed to load tasks. Please try again.
                    </div>
                `);
            }
        });
    }

    function createNotificationSettingPills(preset) {
            const pills = [];

            if (preset.reminderDaysBefore) {
                pills.push(`
                    <span class="badge notification-type-setting-badge">
                        <i class="fas fa-calendar-day me-2"></i>${preset.reminderDaysBefore} day(s) before, at ${preset.reminderTime}
                    </span>
                `);
            }

            if (preset.reminderHoursBefore && preset.reminderMinutesBefore) {
                pills.push(`
                    <span class="badge notification-type-setting-badge">
                        <i class="fas fa-clock me-2"></i>${preset.reminderHoursBefore} hour(s) ${preset.reminderMinutesBefore} minute(s) before
                    </span>
                `);
            }else if(preset.reminderHoursBefore)
            {
                pills.push(`
                    <span class="badge notification-type-setting-badge">
                        <i class="fas fa-clock me-2"></i>${preset.reminderHoursBefore} hour(s) before
                    </span>
                `);
            }
            else if(preset.reminderMinutesBefore)
            {
                pills.push(`
                    <span class="badge notification-type-setting-badge">
                        <i class="fas fa-clock me-2"></i>${preset.reminderMinutesBefore} minute(s) before
                    </span>
                `);
            }
            
            if (preset.isDaily) {
                pills.push(`
                    <span class="badge notification-type-setting-badge">
                        <i class="fas fa-redo me-2"></i> Daily
                    </span>
                `);
            }
            
            return pills.join('');
        }

    function createRecurringSettingPills(preset) {
        const pills = [];
        console.log(preset.daytoGenerate);
        if (preset.daytoGenerate) {
            pills.push(`
                        <span class="badge recurring-type-setting-badge me-2">
                            <i class="fas fa-calendar-day"></i> ${preset.daytoGenerate}
                        </span>
                    `);
        }
        if (preset.recurringCount) {
            pills.push(`
                        <span class="badge recurring-type-setting-badge">
                            <i class="fas fa-redo-day"></i>Recurs ${preset.recurringCount} times(s)
                        </span>
                    `);
        }

        return pills.join('');
    }

    function createRecurringCountPills(preset) {
        if (preset) {
            return `
                    <span class="timing-pill">
                        <i class="fas fa-redo-day"></i>Recurs ${preset} times(s)
                    </span>
            `
        }

        return "";
    }

    document.querySelectorAll('.page-link').forEach(link => {
        link.addEventListener('click', (e) => {
            e.preventDefault();
            // Remove active class from all page items
            document.querySelectorAll('.page-item').forEach(item => {
                item.classList.remove('active');
            });
            // Add active class to clicked page item's parent
            if (!link.getAttribute('aria-disabled')) {
                link.parentElement.classList.add('active');
            }
        });
    });
    
    document.addEventListener('DOMContentLoaded', function () {
        const tabLinks = document.querySelectorAll('.tab-link');

        tabLinks.forEach(link => {
            link.addEventListener('click', (e) => {
                e.preventDefault();
                tabLinks.forEach(tab => tab.classList.remove('active'));
                link.classList.add('active');
                // In this demo version, we're not loading new content
            });
        });
    });

    // Add filter functionality
    document.addEventListener('DOMContentLoaded', function () {
        // Initial load of presets
        getTaskCounts();
        // Search input handler


        // Type filter handler
        const statusFilter = document.getElementById('statusFilter');
        const priorityFilter = document.getElementById('priorityFilter');

        function filterTasks() {
            const selectedStatus = statusFilter.value;
            const selectedPriority = priorityFilter.value;
        }

        statusFilter.addEventListener('change', filterTasks);
        priorityFilter.addEventListener('change', filterTasks);

            // Initial load (default tab - This Week's Tasks)
            loadTasks('thisWeek');

    });

    // Initialize tooltips if you're using them
    document.addEventListener('DOMContentLoaded', function () {
        const tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
        tooltipTriggerList.map(function (tooltipTriggerEl) {
            return new bootstrap.Tooltip(tooltipTriggerEl);
        });
    });

    document.addEventListener('DOMContentLoaded', function () {
        const progressBars = document.querySelectorAll('.progress');
        progressBars.forEach(bar => {
            const dueDate = new Date(bar.getAttribute('data-due-date'));
            const subtasks = bar.getAttribute('data-subtasks');

            new bootstrap.Tooltip(bar, {
                title: `Due: ${dueDate.toLocaleDateString()}\nSubtasks: ${subtasks}`,
                placement: 'top'
            });
        });

        document.addEventListener('DOMContentLoaded', function () {
            // Initialize all dropdowns
            var dropdownElementList = [].slice.call(document.querySelectorAll('.dropdown-toggle'))
            var dropdownList = dropdownElementList.map(function (dropdownToggleEl) {
                return new bootstrap.Dropdown(dropdownToggleEl)
            });
        });
    });

</script>

    <style>

/* ==========================================================================
   8. Modal Styles
   ========================================================================== */
    /* Modal Styles */
    .modal-content {
        border: none;
        border-radius: 12px;
    }

    .modal-header {
        border-bottom: 1px solid #e9ecef;
        padding: 1.5rem;
    }

    .modal-body {
        padding: 1.5rem;
    }

    /* Preset Cards */
    .setting-card {
        background: #f8f9fa;
        padding: 1rem;
        border-radius: 8px;
        height: 100%;
    }

    .setting-value {
        color: #495057;
        margin: 0;
        font-size: 0.875rem;
    }

    /* Status Priority */
    .quick-actions {
        display: flex;
        align-items: center;
        padding: 8px 0;
    }

    .quick-actions .dropdown {
        margin-right: 8px;
    }

    .quick-actions .dropdown-toggle {
        border: none;
        padding: 0.5rem 1rem;
        font-size: 0.875rem;
    }

    .quick-actions button {
        white-space: nowrap;
        display: inline-flex;
        align-items: center;
        padding: 6px 12px;
        font-size: 0.875rem;
    }

    /* Subtask Styles */
    .subtask-item {
        background: #fff;
        border: 1px solid #c7e3ff;
        border-radius: 8px;
        padding: 1rem;
        margin-bottom: 1rem;
    }

    .subtask-title {
        font-size: 0.9rem;
        margin: 0;
    }

    .subtask-actions {
        display: flex;
        align-items: center;
        gap: 16px;
        display: flex;
        gap: 0.5rem;
        margin-top: 0.5rem;
    }

        .subtask-actions .btn {
            font-size: 0.875rem;
            padding: 4px 12px;
            border-radius: 20px;
        }

        .subtask-actions select {
            font-size: 0.75rem;
            padding: 0.25rem 0.5rem;
        }

        .subtask-actions .btn {
            font-size: 0.875rem;
            padding: 4px 12px;
            border-radius: 20px;
        }

        .subtask-actions .dropdown-toggle::after {
            margin-left: 6px;
        }

    .subtask-description-container {
        position: relative;
        background: #f8f9fa;
        border-radius: 6px;
        padding: 8px 12px;
        margin: 8px 0;
        max-height: 80px;
        overflow-y: auto;
    }

    .subtask-description {
        font-size: 0.875rem;
        color: #6c757d;
        line-height: 1.4;
        margin: 0;
    }

    /* Add scrollbar styling for the description container */
    .subtask-description-container::-webkit-scrollbar {
        width: 4px;
    }

    .subtask-description-container::-webkit-scrollbar-track {
        background: #f1f1f1;
    }

    .subtask-description-container::-webkit-scrollbar-thumb {
        background: #888;
        border-radius: 4px;
    }

        .subtask-description-container::-webkit-scrollbar-thumb:hover {
            background: #555;
        }

    .subtask-description-container {
        background-color: #f8f9fa;
        border-radius: 6px;
        padding: 12px;
    }
.task-icons {
    position: absolute;
    top: 10px;
    right: 10px;
    display: flex;
    gap: 5px;
}

.icon-pill {
    padding: 4px 8px;
    border-radius: 20px;
    display: inline-flex;
    align-items: center;
    justify-content: center;
    font-size: 12px;
}

.notification-pill {
    background-color: rgba(255, 193, 7, 0.2);
    color: #ffc107;
}

.recurring-pill {
    background-color: rgba(13, 202, 240, 0.2);
    color: #0dcaf0;
}

.icon-pill i {
    font-size: 12px;
}

.task-card {
    position: relative;
}

.category-label {
    display: block;
    font-size: 0.75rem;
    margin-bottom: 0.5rem;
    color: #6c757d;
}

.category-label i {
    font-size: 0.7rem;
}

.task-header h5 {
    margin-bottom: 0.25rem;
}

    .category-label {
        display: inline-block;
        font-size: 0.75rem;
        color: #6c757d;
    }

        .category-label i {
            font-size: 0.7rem;
        }

    .task-header h5 {
        margin-bottom: 0;
    }

    .task-header .d-flex {
        margin-bottom: 0.5rem;
    }

.status-priority-line {
    display: flex;
    align-items: center;
    gap: 1rem;
    flex-wrap: wrap;
}

.status-priority-line-subtask {
    display: flex;
    align-items: center;
    gap: 0.35rem;
    flex-wrap: wrap;
        background-color: #ededed;
    border-radius: 20px;
    padding: 0.2rem 0.2rem 0.2rem 1.25rem;
}

.separator {
    color: #878787;
}

.category-group,
.status-group,
.priority-group,
.due-date-group {
    display: flex;
    align-items: center;
}

.category-badge {
        background-color: #728ee3;
    color: white;
}

.modal-header .category-badge {
    font-size: 0.8rem;
    padding: 0.3rem 0.6rem;
        background-color: #728ee3;
    color: white;
}

.modal-header .modal-title {
    margin-bottom: 0;
}

.preset-type {
    display: flex;
    align-items: center;
}

.type-label {
    font-size: 0.875rem;
    color: #495057;
}

.notification-type-badge {
    background-color: var(--accent-blue);
    color: white;
    padding: 4px 12px;
    font-size: 0.75rem;
    font-weight: 500;
    border-radius: 20px;
}

.notification-type-setting-badge {
    background-color: var(--accent-blue);
    color: white;
    padding: 4px 12px;
    font-size: 0.75rem;
    font-weight: 500;
    border-radius: 20px;
}

.recurring-type-badge {
    background-color: #2299ab;
    color: white;
    padding: 4px 12px;
    font-size: 0.75rem;
    font-weight: 500;
    border-radius: 20px;
}

.recurring-type-setting-badge {
    background-color: #2299ab;
    color: white;
    padding: 4px 12px;
    font-size: 0.75rem;
    font-weight: 500;
    border-radius: 20px;
}
</style>